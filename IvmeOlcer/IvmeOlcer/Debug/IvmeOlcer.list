
IvmeOlcer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f7c  08002f7c  00012f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000120  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2000012c  2000012c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d197  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000223b  00000000  00000000  0002d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005685  00000000  00000000  0002f40e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  00034a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  00035338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004b27  00000000  00000000  00035e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000031f5  00000000  00000000  0003a94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003db44  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000019a8  00000000  00000000  0003dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f64 	.word	0x08002f64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f64 	.word	0x08002f64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_InitTick+0x3c>)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_InitTick+0x40>)
{
 8000cb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	7818      	ldrb	r0, [r3, #0]
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc4:	f000 f8aa 	bl	8000e1c <HAL_SYSTICK_Config>
 8000cc8:	4604      	mov	r4, r0
 8000cca:	b958      	cbnz	r0, 8000ce4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	2d0f      	cmp	r5, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f85e 	bl	8000d98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_InitTick+0x44>)
 8000cde:	4620      	mov	r0, r4
 8000ce0:	601d      	str	r5, [r3, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_Init>:
{
 8000cf4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x30>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cfe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f82f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffc8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000d1c:	f001 ffb2 	bl	8002c84 <HAL_MspInit>
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	bd08      	pop	{r3, pc}
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x10>)
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_IncTick+0x14>)
 8000d2c:	6811      	ldr	r1, [r2, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000003c 	.word	0x2000003c
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <HAL_GetTick+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000003c 	.word	0x2000003c

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff6 	bl	8000d40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d54:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	bf1c      	itt	ne
 8000d58:	4b05      	ldrne	r3, [pc, #20]	; (8000d70 <HAL_Delay+0x24>)
 8000d5a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	bf18      	it	ne
 8000d60:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	f7ff ffed 	bl	8000d40 <HAL_GetTick>
 8000d66:	1b40      	subs	r0, r0, r5
 8000d68:	4284      	cmp	r4, r0
 8000d6a:	d8fa      	bhi.n	8000d62 <HAL_Delay+0x16>
  {
  }
}
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000000 	.word	0x20000000

08000d74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	0200      	lsls	r0, r0, #8
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d8e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d90:	60d3      	str	r3, [r2, #12]
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b530      	push	{r4, r5, lr}
 8000d9c:	68dc      	ldr	r4, [r3, #12]
 8000d9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	bf28      	it	cs
 8000dac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 0501 	mov.w	r5, #1
 8000db4:	fa05 f303 	lsl.w	r3, r5, r3
 8000db8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbc:	bf8c      	ite	hi
 8000dbe:	3c03      	subhi	r4, #3
 8000dc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc6:	fa05 f404 	lsl.w	r4, r5, r4
 8000dca:	3c01      	subs	r4, #1
 8000dcc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000dce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	ea42 0201 	orr.w	r2, r2, r1
 8000dd4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	bfad      	iteet	ge
 8000dda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	f000 000f 	andlt.w	r0, r0, #15
 8000de2:	4b06      	ldrlt	r3, [pc, #24]	; (8000dfc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	bfb5      	itete	lt
 8000dea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000df4:	bd30      	pop	{r4, r5, pc}
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000ed14 	.word	0xe000ed14

08000e00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e00:	2800      	cmp	r0, #0
 8000e02:	db08      	blt.n	8000e16 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	0942      	lsrs	r2, r0, #5
 8000e06:	2301      	movs	r3, #1
 8000e08:	f000 001f 	and.w	r0, r0, #31
 8000e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_NVIC_EnableIRQ+0x18>)
 8000e12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e22:	d20a      	bcs.n	8000e3a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	21f0      	movs	r1, #240	; 0xf0
 8000e2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e48:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d003      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e58:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000e60:	6813      	ldr	r3, [r2, #0]
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000e68:	2000      	movs	r0, #0
}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e70:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001024 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e78:	4a68      	ldr	r2, [pc, #416]	; (800101c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001028 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e80:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e82:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e84:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e86:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e88:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	f040 80b0 	bne.w	8000ff0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e90:	684c      	ldr	r4, [r1, #4]
 8000e92:	f024 0c10 	bic.w	ip, r4, #16
 8000e96:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e9a:	2e01      	cmp	r6, #1
 8000e9c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ea0:	d812      	bhi.n	8000ec8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000ea2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	2603      	movs	r6, #3
 8000ea6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eaa:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	68ce      	ldr	r6, [r1, #12]
 8000eb0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eb4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000eb6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eb8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eba:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebe:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec2:	409e      	lsls	r6, r3
 8000ec4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ec6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000eca:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ecc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ed0:	43f6      	mvns	r6, r6
 8000ed2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed6:	688f      	ldr	r7, [r1, #8]
 8000ed8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000edc:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000ee4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	d116      	bne.n	8000f16 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000eec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000efc:	f04f 0c0f 	mov.w	ip, #15
 8000f00:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f04:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	690f      	ldr	r7, [r1, #16]
 8000f0a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f0e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f16:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f18:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	f004 0703 	and.w	r7, r4, #3
 8000f1e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f22:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f26:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f28:	00e6      	lsls	r6, r4, #3
 8000f2a:	d561      	bpl.n	8000ff0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	f04f 0b00 	mov.w	fp, #0
 8000f30:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f34:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f38:	4e39      	ldr	r6, [pc, #228]	; (8001020 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f3e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f42:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f46:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f4a:	9703      	str	r7, [sp, #12]
 8000f4c:	9f03      	ldr	r7, [sp, #12]
 8000f4e:	f023 0703 	bic.w	r7, r3, #3
 8000f52:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f56:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f66:	f04f 0e0f 	mov.w	lr, #15
 8000f6a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f74:	d043      	beq.n	8000ffe <HAL_GPIO_Init+0x192>
 8000f76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f7a:	42b0      	cmp	r0, r6
 8000f7c:	d041      	beq.n	8001002 <HAL_GPIO_Init+0x196>
 8000f7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f82:	42b0      	cmp	r0, r6
 8000f84:	d03f      	beq.n	8001006 <HAL_GPIO_Init+0x19a>
 8000f86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f8a:	42b0      	cmp	r0, r6
 8000f8c:	d03d      	beq.n	800100a <HAL_GPIO_Init+0x19e>
 8000f8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f92:	42b0      	cmp	r0, r6
 8000f94:	d03b      	beq.n	800100e <HAL_GPIO_Init+0x1a2>
 8000f96:	4548      	cmp	r0, r9
 8000f98:	d03b      	beq.n	8001012 <HAL_GPIO_Init+0x1a6>
 8000f9a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f9e:	42b0      	cmp	r0, r6
 8000fa0:	d039      	beq.n	8001016 <HAL_GPIO_Init+0x1aa>
 8000fa2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fa6:	42b0      	cmp	r0, r6
 8000fa8:	bf14      	ite	ne
 8000faa:	2608      	movne	r6, #8
 8000fac:	2607      	moveq	r6, #7
 8000fae:	fa06 f60c 	lsl.w	r6, r6, ip
 8000fb2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000fb8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	bf0c      	ite	eq
 8000fc2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fc4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000fc6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000fc8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fca:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fce:	bf0c      	ite	eq
 8000fd0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fd2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000fd4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	bf0c      	ite	eq
 8000fde:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fe0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000fe2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	bf54      	ite	pl
 8000fea:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fec:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fee:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	f47f af45 	bne.w	8000e82 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ff8:	b005      	add	sp, #20
 8000ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	465e      	mov	r6, fp
 8001000:	e7d5      	b.n	8000fae <HAL_GPIO_Init+0x142>
 8001002:	2601      	movs	r6, #1
 8001004:	e7d3      	b.n	8000fae <HAL_GPIO_Init+0x142>
 8001006:	2602      	movs	r6, #2
 8001008:	e7d1      	b.n	8000fae <HAL_GPIO_Init+0x142>
 800100a:	2603      	movs	r6, #3
 800100c:	e7cf      	b.n	8000fae <HAL_GPIO_Init+0x142>
 800100e:	2604      	movs	r6, #4
 8001010:	e7cd      	b.n	8000fae <HAL_GPIO_Init+0x142>
 8001012:	2605      	movs	r6, #5
 8001014:	e7cb      	b.n	8000fae <HAL_GPIO_Init+0x142>
 8001016:	2606      	movs	r6, #6
 8001018:	e7c9      	b.n	8000fae <HAL_GPIO_Init+0x142>
 800101a:	bf00      	nop
 800101c:	40013c00 	.word	0x40013c00
 8001020:	40020000 	.word	0x40020000
 8001024:	40023800 	.word	0x40023800
 8001028:	40021400 	.word	0x40021400

0800102c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800102c:	b10a      	cbz	r2, 8001032 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	6181      	str	r1, [r0, #24]
 8001030:	4770      	bx	lr
 8001032:	0409      	lsls	r1, r1, #16
 8001034:	e7fb      	b.n	800102e <HAL_GPIO_WritePin+0x2>

08001036 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001038:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800103c:	6959      	ldr	r1, [r3, #20]
 800103e:	4201      	tst	r1, r0
 8001040:	d002      	beq.n	8001048 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001042:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001044:	f7ff fff7 	bl	8001036 <HAL_GPIO_EXTI_Callback>
 8001048:	bd08      	pop	{r3, pc}
 800104a:	bf00      	nop
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001052:	4604      	mov	r4, r0
 8001054:	2800      	cmp	r0, #0
 8001056:	d041      	beq.n	80010dc <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001058:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800105c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001060:	b92b      	cbnz	r3, 800106e <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001064:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001068:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800106a:	f001 fe2b 	bl	8002cc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800106e:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001070:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001072:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001076:	69d3      	ldr	r3, [r2, #28]
 8001078:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800107c:	f023 030f 	bic.w	r3, r3, #15
 8001080:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001082:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001084:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001086:	428b      	cmp	r3, r1
 8001088:	d031      	beq.n	80010ee <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800108a:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800108c:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800108e:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001090:	bf0c      	ite	eq
 8001092:	2510      	moveq	r5, #16
 8001094:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001096:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001098:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800109a:	bf98      	it	ls
 800109c:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800109e:	f000 fd39 	bl	8001b14 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80010a2:	6923      	ldr	r3, [r4, #16]
 80010a4:	6961      	ldr	r1, [r4, #20]
 80010a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010aa:	d11b      	bne.n	80010e4 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80010ac:	68e3      	ldr	r3, [r4, #12]
 80010ae:	220a      	movs	r2, #10
 80010b0:	b1b3      	cbz	r3, 80010e0 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010b2:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b8:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80010ba:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c0:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80010c2:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80010c6:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80010ca:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80010cc:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80010ce:	1e99      	subs	r1, r3, #2
 80010d0:	29fd      	cmp	r1, #253	; 0xfd
 80010d2:	d90e      	bls.n	80010f2 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80010d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80010de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010e0:	00eb      	lsls	r3, r5, #3
 80010e2:	e7e7      	b.n	80010b4 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010e4:	230a      	movs	r3, #10
 80010e6:	fbb0 f0f5 	udiv	r0, r0, r5
 80010ea:	4343      	muls	r3, r0
 80010ec:	e7e5      	b.n	80010ba <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 80010ee:	2200      	movs	r2, #0
 80010f0:	e7ed      	b.n	80010ce <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80010f2:	4313      	orrs	r3, r2
 80010f4:	6922      	ldr	r2, [r4, #16]
 80010f6:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80010f8:	6866      	ldr	r6, [r4, #4]
 80010fa:	68e5      	ldr	r5, [r4, #12]
 80010fc:	69a0      	ldr	r0, [r4, #24]
 80010fe:	f8df e07c 	ldr.w	lr, [pc, #124]	; 800117c <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001102:	4313      	orrs	r3, r2
 8001104:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001106:	68a3      	ldr	r3, [r4, #8]
 8001108:	69cf      	ldr	r7, [r1, #28]
 800110a:	ea46 0203 	orr.w	r2, r6, r3
 800110e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001112:	432a      	orrs	r2, r5
 8001114:	4302      	orrs	r2, r0
 8001116:	ea07 070e 	and.w	r7, r7, lr
 800111a:	433a      	orrs	r2, r7
 800111c:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800111e:	6a22      	ldr	r2, [r4, #32]
 8001120:	2a01      	cmp	r2, #1
 8001122:	d11d      	bne.n	8001160 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_I2S_Init+0x120>)
 8001126:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001128:	4f12      	ldr	r7, [pc, #72]	; (8001174 <HAL_I2S_Init+0x124>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <HAL_I2S_Init+0x128>)
 800112c:	42b9      	cmp	r1, r7
 800112e:	bf18      	it	ne
 8001130:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001134:	432b      	orrs	r3, r5
 8001136:	69d1      	ldr	r1, [r2, #28]
 8001138:	ea01 010e 	and.w	r1, r1, lr
 800113c:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800113e:	2102      	movs	r1, #2
 8001140:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001142:	69d7      	ldr	r7, [r2, #28]
 8001144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001148:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 800114a:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800114e:	ea43 0307 	orr.w	r3, r3, r7
 8001152:	bf0c      	ite	eq
 8001154:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001158:	2100      	movne	r1, #0
 800115a:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800115c:	430b      	orrs	r3, r1
 800115e:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001160:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001162:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001164:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001166:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116c:	0800118b 	.word	0x0800118b
 8001170:	08001289 	.word	0x08001289
 8001174:	40003800 	.word	0x40003800
 8001178:	40003400 	.word	0x40003400
 800117c:	fffff040 	.word	0xfffff040

08001180 <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001180:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001182:	4718      	bx	r3

08001184 <HAL_I2S_TxCpltCallback>:
 8001184:	4770      	bx	lr

08001186 <HAL_I2S_RxCpltCallback>:
 8001186:	4770      	bx	lr

08001188 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001188:	4770      	bx	lr

0800118a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800118a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800118c:	6803      	ldr	r3, [r0, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001192:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001196:	2a04      	cmp	r2, #4
{
 8001198:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800119a:	d136      	bne.n	800120a <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800119c:	9a01      	ldr	r2, [sp, #4]
 800119e:	07d1      	lsls	r1, r2, #31
 80011a0:	d517      	bpl.n	80011d2 <I2S_IRQHandler+0x48>
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	0652      	lsls	r2, r2, #25
 80011a6:	d514      	bpl.n	80011d2 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80011a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80011b0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80011b2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80011b4:	3a01      	subs	r2, #1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80011ba:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80011bc:	b292      	uxth	r2, r2
 80011be:	b942      	cbnz	r2, 80011d2 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011c6:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80011ce:	f7ff ffda 	bl	8001186 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80011d2:	9b01      	ldr	r3, [sp, #4]
 80011d4:	0659      	lsls	r1, r3, #25
 80011d6:	d518      	bpl.n	800120a <I2S_IRQHandler+0x80>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	0692      	lsls	r2, r2, #26
 80011de:	d514      	bpl.n	800120a <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80011e8:	2200      	movs	r2, #0
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	9202      	str	r2, [sp, #8]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80011fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff ffbf 	bl	8001188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800120a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800120e:	2b03      	cmp	r3, #3
 8001210:	d136      	bne.n	8001280 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	079b      	lsls	r3, r3, #30
 8001216:	d519      	bpl.n	800124c <I2S_IRQHandler+0xc2>
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6853      	ldr	r3, [r2, #4]
 800121c:	0618      	lsls	r0, r3, #24
 800121e:	d515      	bpl.n	800124c <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001222:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001226:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001228:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800122a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800122c:	3b01      	subs	r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001234:	b29b      	uxth	r3, r3
 8001236:	b94b      	cbnz	r3, 800124c <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800123e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001240:	2301      	movs	r3, #1
 8001242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ff9c 	bl	8001184 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800124c:	9b01      	ldr	r3, [sp, #4]
 800124e:	0719      	lsls	r1, r3, #28
 8001250:	d516      	bpl.n	8001280 <I2S_IRQHandler+0xf6>
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	0692      	lsls	r2, r2, #26
 8001258:	d512      	bpl.n	8001280 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001260:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001262:	2200      	movs	r2, #0
 8001264:	9203      	str	r2, [sp, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800126c:	2301      	movs	r3, #1
 800126e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001272:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff84 	bl	8001188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001280:	b004      	add	sp, #16
 8001282:	bd10      	pop	{r4, pc}

08001284 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001284:	4770      	bx	lr
	...

08001288 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001288:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800128a:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800128c:	498b      	ldr	r1, [pc, #556]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800128e:	6893      	ldr	r3, [r2, #8]
{
 8001290:	b086      	sub	sp, #24
 8001292:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001294:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001298:	428a      	cmp	r2, r1
 800129a:	bf18      	it	ne
 800129c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80012a4:	6851      	ldr	r1, [r2, #4]
 80012a6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80012ac:	6841      	ldr	r1, [r0, #4]
 80012ae:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80012b2:	f040 8090 	bne.w	80013d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	0799      	lsls	r1, r3, #30
 80012ba:	d51a      	bpl.n	80012f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80012bc:	9b02      	ldr	r3, [sp, #8]
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	d517      	bpl.n	80012f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80012c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012c4:	1c99      	adds	r1, r3, #2
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	6241      	str	r1, [r0, #36]	; 0x24
 80012ca:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80012cc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80012d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b95b      	cbnz	r3, 80012f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012da:	6853      	ldr	r3, [r2, #4]
 80012dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80012e0:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80012e2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b923      	cbnz	r3, 80012f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80012ee:	f7ff ffc9 	bl	8001284 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	07d8      	lsls	r0, r3, #31
 80012f6:	d522      	bpl.n	800133e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	0659      	lsls	r1, r3, #25
 80012fc:	d51f      	bpl.n	800133e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80012fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	496e      	ldr	r1, [pc, #440]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001304:	1c93      	adds	r3, r2, #2
 8001306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800130a:	4288      	cmp	r0, r1
 800130c:	bf18      	it	ne
 800130e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001316:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001318:	3a01      	subs	r2, #1
 800131a:	b292      	uxth	r2, r2
 800131c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800131e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001320:	b292      	uxth	r2, r2
 8001322:	b962      	cbnz	r2, 800133e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800132a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800132c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	b92b      	cbnz	r3, 800133e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001332:	2301      	movs	r3, #1
 8001334:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff ffa3 	bl	8001284 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	065a      	lsls	r2, r3, #25
 8001342:	d522      	bpl.n	800138a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001344:	9b03      	ldr	r3, [sp, #12]
 8001346:	069b      	lsls	r3, r3, #26
 8001348:	d51f      	bpl.n	800138a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	495b      	ldr	r1, [pc, #364]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 800134e:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001350:	428b      	cmp	r3, r1
 8001352:	bf18      	it	ne
 8001354:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001358:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800135a:	6851      	ldr	r1, [r2, #4]
 800135c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001360:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001368:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800136a:	2200      	movs	r2, #0
 800136c:	9204      	str	r2, [sp, #16]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	9204      	str	r2, [sp, #16]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	9304      	str	r3, [sp, #16]
 8001376:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001378:	2301      	movs	r3, #1
 800137a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800137e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001386:	f7ff feff 	bl	8001188 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	0718      	lsls	r0, r3, #28
 800138e:	d520      	bpl.n	80013d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001390:	9b02      	ldr	r3, [sp, #8]
 8001392:	0699      	lsls	r1, r3, #26
 8001394:	d51d      	bpl.n	80013d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001396:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013a0:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013a2:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80013a4:	428b      	cmp	r3, r1
 80013a6:	bf18      	it	ne
 80013a8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80013ac:	6851      	ldr	r1, [r2, #4]
 80013ae:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80013b2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013b4:	2200      	movs	r2, #0
 80013b6:	9205      	str	r2, [sp, #20]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	9305      	str	r3, [sp, #20]
 80013bc:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80013be:	2301      	movs	r3, #1
 80013c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80013c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff fedb 	bl	8001188 <HAL_I2S_ErrorCallback>
}
 80013d2:	b006      	add	sp, #24
 80013d4:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80013d6:	9a01      	ldr	r2, [sp, #4]
 80013d8:	0792      	lsls	r2, r2, #30
 80013da:	d51a      	bpl.n	8001412 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 80013dc:	9a03      	ldr	r2, [sp, #12]
 80013de:	0611      	lsls	r1, r2, #24
 80013e0:	d517      	bpl.n	8001412 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80013e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80013e4:	1c91      	adds	r1, r2, #2
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	6241      	str	r1, [r0, #36]	; 0x24
 80013ea:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80013ec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80013ee:	3a01      	subs	r2, #1
 80013f0:	b292      	uxth	r2, r2
 80013f2:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80013f4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80013f6:	b292      	uxth	r2, r2
 80013f8:	b95a      	cbnz	r2, 8001412 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001400:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001402:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001404:	b29b      	uxth	r3, r3
 8001406:	b923      	cbnz	r3, 8001412 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001408:	2301      	movs	r3, #1
 800140a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800140e:	f7ff ff39 	bl	8001284 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001412:	9b00      	ldr	r3, [sp, #0]
 8001414:	07da      	lsls	r2, r3, #31
 8001416:	d51c      	bpl.n	8001452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001418:	9b02      	ldr	r3, [sp, #8]
 800141a:	065b      	lsls	r3, r3, #25
 800141c:	d519      	bpl.n	8001452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800141e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001420:	1c9a      	adds	r2, r3, #2
 8001422:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001424:	6822      	ldr	r2, [r4, #0]
 8001426:	68d1      	ldr	r1, [r2, #12]
 8001428:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800142a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800142c:	3b01      	subs	r3, #1
 800142e:	b29b      	uxth	r3, r3
 8001430:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001432:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001434:	b29b      	uxth	r3, r3
 8001436:	b963      	cbnz	r3, 8001452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001438:	6853      	ldr	r3, [r2, #4]
 800143a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800143e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	b92b      	cbnz	r3, 8001452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001446:	2301      	movs	r3, #1
 8001448:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff ff19 	bl	8001284 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001452:	9b00      	ldr	r3, [sp, #0]
 8001454:	0658      	lsls	r0, r3, #25
 8001456:	d51b      	bpl.n	8001490 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001458:	9b02      	ldr	r3, [sp, #8]
 800145a:	0699      	lsls	r1, r3, #26
 800145c:	d518      	bpl.n	8001490 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800145e:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001460:	4916      	ldr	r1, [pc, #88]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001462:	6853      	ldr	r3, [r2, #4]
 8001464:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001468:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800146c:	428a      	cmp	r2, r1
 800146e:	bf18      	it	ne
 8001470:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001474:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800147c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800147e:	2301      	movs	r3, #1
 8001480:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800148c:	f7ff fe7c 	bl	8001188 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	071a      	lsls	r2, r3, #28
 8001494:	d59d      	bpl.n	80013d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001496:	9b03      	ldr	r3, [sp, #12]
 8001498:	069b      	lsls	r3, r3, #26
 800149a:	d59a      	bpl.n	80013d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	4907      	ldr	r1, [pc, #28]	; (80014bc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80014a2:	428a      	cmp	r2, r1
 80014a4:	bf18      	it	ne
 80014a6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80014b0:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014b2:	6853      	ldr	r3, [r2, #4]
 80014b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80014b8:	6053      	str	r3, [r2, #4]
 80014ba:	e780      	b.n	80013be <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 80014bc:	40003800 	.word	0x40003800
 80014c0:	40003400 	.word	0x40003400

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	4604      	mov	r4, r0
 80014ca:	b908      	cbnz	r0, 80014d0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80014cc:	2001      	movs	r0, #1
 80014ce:	e03f      	b.n	8001550 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d0:	6803      	ldr	r3, [r0, #0]
 80014d2:	07dd      	lsls	r5, r3, #31
 80014d4:	d410      	bmi.n	80014f8 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	0798      	lsls	r0, r3, #30
 80014da:	d45a      	bmi.n	8001592 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	071a      	lsls	r2, r3, #28
 80014e0:	f100 809c 	bmi.w	800161c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	075b      	lsls	r3, r3, #29
 80014e8:	f100 80ba 	bmi.w	8001660 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	69a0      	ldr	r0, [r4, #24]
 80014ee:	2800      	cmp	r0, #0
 80014f0:	f040 811b 	bne.w	800172a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
 80014f6:	e02b      	b.n	8001550 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f8:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	f002 020c 	and.w	r2, r2, #12
 8001500:	2a04      	cmp	r2, #4
 8001502:	d007      	beq.n	8001514 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	2a08      	cmp	r2, #8
 800150c:	d10a      	bne.n	8001524 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	0259      	lsls	r1, r3, #9
 8001512:	d507      	bpl.n	8001524 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4b9d      	ldr	r3, [pc, #628]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	039a      	lsls	r2, r3, #14
 800151a:	d5dc      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x12>
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1d9      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
 8001522:	e7d3      	b.n	80014cc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	4d99      	ldr	r5, [pc, #612]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d113      	bne.n	8001556 <HAL_RCC_OscConfig+0x92>
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001536:	f7ff fc03 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4d94      	ldr	r5, [pc, #592]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800153c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	039b      	lsls	r3, r3, #14
 8001542:	d4c8      	bmi.n	80014d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbfc 	bl	8000d40 <HAL_GetTick>
 8001548:	1b80      	subs	r0, r0, r6
 800154a:	2864      	cmp	r0, #100	; 0x64
 800154c:	d9f7      	bls.n	800153e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800154e:	2003      	movs	r0, #3
}
 8001550:	b002      	add	sp, #8
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155a:	d104      	bne.n	8001566 <HAL_RCC_OscConfig+0xa2>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001562:	602b      	str	r3, [r5, #0]
 8001564:	e7e3      	b.n	800152e <HAL_RCC_OscConfig+0x6a>
 8001566:	682a      	ldr	r2, [r5, #0]
 8001568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800156c:	602a      	str	r2, [r5, #0]
 800156e:	682a      	ldr	r2, [r5, #0]
 8001570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001574:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1dd      	bne.n	8001536 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800157a:	f7ff fbe1 	bl	8000d40 <HAL_GetTick>
 800157e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	039f      	lsls	r7, r3, #14
 8001584:	d5a7      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fbdb 	bl	8000d40 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2864      	cmp	r0, #100	; 0x64
 800158e:	d9f7      	bls.n	8001580 <HAL_RCC_OscConfig+0xbc>
 8001590:	e7dd      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	f012 0f0c 	tst.w	r2, #12
 800159a:	d007      	beq.n	80015ac <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a2:	2a08      	cmp	r2, #8
 80015a4:	d111      	bne.n	80015ca <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	025e      	lsls	r6, r3, #9
 80015aa:	d40e      	bmi.n	80015ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	4b77      	ldr	r3, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0795      	lsls	r5, r2, #30
 80015b2:	d502      	bpl.n	80015ba <HAL_RCC_OscConfig+0xf6>
 80015b4:	68e2      	ldr	r2, [r4, #12]
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d188      	bne.n	80014cc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6921      	ldr	r1, [r4, #16]
 80015be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c8:	e788      	b.n	80014dc <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ca:	68e2      	ldr	r2, [r4, #12]
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x2cc>)
 80015ce:	b1b2      	cbz	r2, 80015fe <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbb4 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4d6c      	ldr	r5, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80015da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	0798      	lsls	r0, r3, #30
 80015e0:	d507      	bpl.n	80015f2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	682b      	ldr	r3, [r5, #0]
 80015e4:	6922      	ldr	r2, [r4, #16]
 80015e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ee:	602b      	str	r3, [r5, #0]
 80015f0:	e774      	b.n	80014dc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fba5 	bl	8000d40 <HAL_GetTick>
 80015f6:	1b80      	subs	r0, r0, r6
 80015f8:	2802      	cmp	r0, #2
 80015fa:	d9ef      	bls.n	80015dc <HAL_RCC_OscConfig+0x118>
 80015fc:	e7a7      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80015fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001600:	f7ff fb9e 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001604:	4d61      	ldr	r5, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	0799      	lsls	r1, r3, #30
 800160c:	f57f af66 	bpl.w	80014dc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fb96 	bl	8000d40 <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	2802      	cmp	r0, #2
 8001618:	d9f6      	bls.n	8001608 <HAL_RCC_OscConfig+0x144>
 800161a:	e798      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161c:	6962      	ldr	r2, [r4, #20]
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x2d0>)
 8001620:	b17a      	cbz	r2, 8001642 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001626:	f7ff fb8b 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4d58      	ldr	r5, [pc, #352]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800162c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001630:	079f      	lsls	r7, r3, #30
 8001632:	f53f af57 	bmi.w	80014e4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fb83 	bl	8000d40 <HAL_GetTick>
 800163a:	1b80      	subs	r0, r0, r6
 800163c:	2802      	cmp	r0, #2
 800163e:	d9f6      	bls.n	800162e <HAL_RCC_OscConfig+0x16a>
 8001640:	e785      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001642:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001644:	f7ff fb7c 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4d50      	ldr	r5, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800164a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800164e:	0798      	lsls	r0, r3, #30
 8001650:	f57f af48 	bpl.w	80014e4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fb74 	bl	8000d40 <HAL_GetTick>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	2802      	cmp	r0, #2
 800165c:	d9f6      	bls.n	800164c <HAL_RCC_OscConfig+0x188>
 800165e:	e776      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 8001662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001664:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001668:	d128      	bne.n	80016bc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800167e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4d45      	ldr	r5, [pc, #276]	; (8001798 <HAL_RCC_OscConfig+0x2d4>)
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	05d9      	lsls	r1, r3, #23
 8001686:	d51b      	bpl.n	80016c0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	4d40      	ldr	r5, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 800168c:	2b01      	cmp	r3, #1
 800168e:	d127      	bne.n	80016e0 <HAL_RCC_OscConfig+0x21c>
 8001690:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001698:	f7ff fb52 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4d3b      	ldr	r5, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800169e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016a6:	079b      	lsls	r3, r3, #30
 80016a8:	d539      	bpl.n	800171e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	f43f af1e 	beq.w	80014ec <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4a36      	ldr	r2, [pc, #216]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 80016b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	e717      	b.n	80014ec <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	2600      	movs	r6, #0
 80016be:	e7df      	b.n	8001680 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb3a 	bl	8000d40 <HAL_GetTick>
 80016cc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	05da      	lsls	r2, r3, #23
 80016d2:	d4d9      	bmi.n	8001688 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d4:	f7ff fb34 	bl	8000d40 <HAL_GetTick>
 80016d8:	1bc0      	subs	r0, r0, r7
 80016da:	2802      	cmp	r0, #2
 80016dc:	d9f7      	bls.n	80016ce <HAL_RCC_OscConfig+0x20a>
 80016de:	e736      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d104      	bne.n	80016ee <HAL_RCC_OscConfig+0x22a>
 80016e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	672b      	str	r3, [r5, #112]	; 0x70
 80016ec:	e7d0      	b.n	8001690 <HAL_RCC_OscConfig+0x1cc>
 80016ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	672a      	str	r2, [r5, #112]	; 0x70
 80016f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016f8:	f022 0204 	bic.w	r2, r2, #4
 80016fc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ca      	bne.n	8001698 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001702:	f7ff fb1d 	bl	8000d40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800170a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800170e:	0798      	lsls	r0, r3, #30
 8001710:	d5cb      	bpl.n	80016aa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fb15 	bl	8000d40 <HAL_GetTick>
 8001716:	1bc0      	subs	r0, r0, r7
 8001718:	4540      	cmp	r0, r8
 800171a:	d9f7      	bls.n	800170c <HAL_RCC_OscConfig+0x248>
 800171c:	e717      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb0f 	bl	8000d40 <HAL_GetTick>
 8001722:	1bc0      	subs	r0, r0, r7
 8001724:	4540      	cmp	r0, r8
 8001726:	d9bd      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1e0>
 8001728:	e711      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172a:	4d18      	ldr	r5, [pc, #96]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
 800172c:	68ab      	ldr	r3, [r5, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d047      	beq.n	80017c6 <HAL_RCC_OscConfig+0x302>
 8001736:	4e19      	ldr	r6, [pc, #100]	; (800179c <HAL_RCC_OscConfig+0x2d8>)
 8001738:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800173c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173e:	d135      	bne.n	80017ac <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001740:	f7ff fafe 	bl	8000d40 <HAL_GetTick>
 8001744:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	0199      	lsls	r1, r3, #6
 800174a:	d429      	bmi.n	80017a0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800174c:	6a22      	ldr	r2, [r4, #32]
 800174e:	69e3      	ldr	r3, [r4, #28]
 8001750:	4313      	orrs	r3, r2
 8001752:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001754:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800175a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800175e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	3a01      	subs	r2, #1
 8001766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800176a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800176c:	2301      	movs	r3, #1
 800176e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001770:	f7ff fae6 	bl	8000d40 <HAL_GetTick>
 8001774:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	019a      	lsls	r2, r3, #6
 800177a:	f53f aebb 	bmi.w	80014f4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fadf 	bl	8000d40 <HAL_GetTick>
 8001782:	1b40      	subs	r0, r0, r5
 8001784:	2802      	cmp	r0, #2
 8001786:	d9f6      	bls.n	8001776 <HAL_RCC_OscConfig+0x2b2>
 8001788:	e6e1      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
 8001798:	40007000 	.word	0x40007000
 800179c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff face 	bl	8000d40 <HAL_GetTick>
 80017a4:	1bc0      	subs	r0, r0, r7
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9cd      	bls.n	8001746 <HAL_RCC_OscConfig+0x282>
 80017aa:	e6d0      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80017ac:	f7ff fac8 	bl	8000d40 <HAL_GetTick>
 80017b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	f57f ae9d 	bpl.w	80014f4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fac1 	bl	8000d40 <HAL_GetTick>
 80017be:	1b00      	subs	r0, r0, r4
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f6      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ee>
 80017c4:	e6c3      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c6:	2801      	cmp	r0, #1
 80017c8:	f43f aec2 	beq.w	8001550 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80017cc:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	69e3      	ldr	r3, [r4, #28]
 80017d0:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f47f ae79 	bne.w	80014cc <HAL_RCC_OscConfig+0x8>
 80017da:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017dc:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f47f ae73 	bne.w	80014cc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ec:	4003      	ands	r3, r0
 80017ee:	4293      	cmp	r3, r2
 80017f0:	f47f ae6c 	bne.w	80014cc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f6:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017fa:	4293      	cmp	r3, r2
 80017fc:	f47f ae66 	bne.w	80014cc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001802:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001806:	1ac0      	subs	r0, r0, r3
 8001808:	bf18      	it	ne
 800180a:	2001      	movne	r0, #1
 800180c:	e6a0      	b.n	8001550 <HAL_RCC_OscConfig+0x8c>
 800180e:	bf00      	nop

08001810 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001812:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	688b      	ldr	r3, [r1, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b04      	cmp	r3, #4
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x16>
 800181e:	2b08      	cmp	r3, #8
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001822:	4810      	ldr	r0, [pc, #64]	; (8001864 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001824:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001826:	4810      	ldr	r0, [pc, #64]	; (8001868 <HAL_RCC_GetSysClockFreq+0x58>)
 8001828:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001830:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	bf14      	ite	ne
 8001836:	480c      	ldrne	r0, [pc, #48]	; (8001868 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001838:	480a      	ldreq	r0, [pc, #40]	; (8001864 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800183e:	bf18      	it	ne
 8001840:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	fba1 0100 	umull	r0, r1, r1, r0
 800184a:	f7ff f8a7 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCC_GetSysClockFreq+0x50>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800185a:	fbb0 f0f3 	udiv	r0, r0, r3
 800185e:	bd08      	pop	{r3, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200

0800186c <HAL_RCC_ClockConfig>:
{
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001870:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001872:	4604      	mov	r4, r0
 8001874:	b910      	cbnz	r0, 800187c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001876:	2001      	movs	r0, #1
 8001878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b44      	ldr	r3, [pc, #272]	; (8001990 <HAL_RCC_ClockConfig+0x124>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	f002 020f 	and.w	r2, r2, #15
 8001884:	428a      	cmp	r2, r1
 8001886:	d329      	bcc.n	80018dc <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	6821      	ldr	r1, [r4, #0]
 800188a:	078f      	lsls	r7, r1, #30
 800188c:	d42e      	bmi.n	80018ec <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	07c8      	lsls	r0, r1, #31
 8001890:	d441      	bmi.n	8001916 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_ClockConfig+0x124>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f002 020f 	and.w	r2, r2, #15
 800189a:	4295      	cmp	r5, r2
 800189c:	d367      	bcc.n	800196e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	0751      	lsls	r1, r2, #29
 80018a2:	d46d      	bmi.n	8001980 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	0713      	lsls	r3, r2, #28
 80018a6:	d507      	bpl.n	80018b8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a8:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
 80018aa:	6921      	ldr	r1, [r4, #16]
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018b6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b8:	f7ff ffaa 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x12c>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	40d8      	lsrs	r0, r3
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_ClockConfig+0x130>)
 80018cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_RCC_ClockConfig+0x134>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f7ff f9eb 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4299      	cmp	r1, r3
 80018e8:	d1c5      	bne.n	8001876 <HAL_RCC_ClockConfig+0xa>
 80018ea:	e7cd      	b.n	8001888 <HAL_RCC_ClockConfig+0x1c>
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f2:	bf1e      	ittt	ne
 80018f4:	689a      	ldrne	r2, [r3, #8]
 80018f6:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80018fa:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fe:	bf42      	ittt	mi
 8001900:	689a      	ldrmi	r2, [r3, #8]
 8001902:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001906:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	68a0      	ldr	r0, [r4, #8]
 800190c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001910:	4302      	orrs	r2, r0
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e7bb      	b.n	800188e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	6862      	ldr	r2, [r4, #4]
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
 800191a:	2a01      	cmp	r2, #1
 800191c:	d11d      	bne.n	800195a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	d0a7      	beq.n	8001876 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4e1b      	ldr	r6, [pc, #108]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
 8001928:	68b3      	ldr	r3, [r6, #8]
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	4313      	orrs	r3, r2
 8001930:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001932:	f7ff fa05 	bl	8000d40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800193a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193c:	68b3      	ldr	r3, [r6, #8]
 800193e:	6862      	ldr	r2, [r4, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001948:	d0a3      	beq.n	8001892 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff f9f9 	bl	8000d40 <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	4540      	cmp	r0, r8
 8001952:	d9f3      	bls.n	800193c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001954:	2003      	movs	r0, #3
}
 8001956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	1e91      	subs	r1, r2, #2
 800195c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001960:	d802      	bhi.n	8001968 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001966:	e7dd      	b.n	8001924 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	f013 0f02 	tst.w	r3, #2
 800196c:	e7da      	b.n	8001924 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	b2ea      	uxtb	r2, r5
 8001970:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	429d      	cmp	r5, r3
 800197a:	f47f af7c 	bne.w	8001876 <HAL_RCC_ClockConfig+0xa>
 800197e:	e78e      	b.n	800189e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <HAL_RCC_ClockConfig+0x128>)
 8001982:	68e0      	ldr	r0, [r4, #12]
 8001984:	688b      	ldr	r3, [r1, #8]
 8001986:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800198a:	4303      	orrs	r3, r0
 800198c:	608b      	str	r3, [r1, #8]
 800198e:	e789      	b.n	80018a4 <HAL_RCC_ClockConfig+0x38>
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	08002f7c 	.word	0x08002f7c
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019b2:	6810      	ldr	r0, [r2, #0]
}
 80019b4:	40d8      	lsrs	r0, r3
 80019b6:	4770      	bx	lr
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08002f8c 	.word	0x08002f8c
 80019c0:	20000008 	.word	0x20000008

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019d2:	6810      	ldr	r0, [r2, #0]
}
 80019d4:	40d8      	lsrs	r0, r3
 80019d6:	4770      	bx	lr
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08002f8c 	.word	0x08002f8c
 80019e0:	20000008 	.word	0x20000008

080019e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	f013 0f05 	tst.w	r3, #5
{
 80019ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019ec:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019ee:	d105      	bne.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019f0:	6828      	ldr	r0, [r5, #0]
 80019f2:	f010 0002 	ands.w	r0, r0, #2
 80019f6:	d128      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80019f8:	b003      	add	sp, #12
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80019fc:	4c41      	ldr	r4, [pc, #260]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019fe:	4e42      	ldr	r6, [pc, #264]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a04:	f7ff f99c 	bl	8000d40 <HAL_GetTick>
 8001a08:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a0a:	6833      	ldr	r3, [r6, #0]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	d415      	bmi.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001a10:	68ab      	ldr	r3, [r5, #8]
 8001a12:	686a      	ldr	r2, [r5, #4]
 8001a14:	071b      	lsls	r3, r3, #28
 8001a16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a1a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001a1e:	2301      	movs	r3, #1
 8001a20:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a22:	f7ff f98d 	bl	8000d40 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a26:	4c38      	ldr	r4, [pc, #224]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001a28:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	0118      	lsls	r0, r3, #4
 8001a2e:	d4df      	bmi.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a30:	f7ff f986 	bl	8000d40 <HAL_GetTick>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	2802      	cmp	r0, #2
 8001a38:	d9f7      	bls.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001a3a:	e004      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a3c:	f7ff f980 	bl	8000d40 <HAL_GetTick>
 8001a40:	1bc0      	subs	r0, r0, r7
 8001a42:	2802      	cmp	r0, #2
 8001a44:	d9e1      	bls.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e7d6      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001a50:	4c2e      	ldr	r4, [pc, #184]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f968 	bl	8000d40 <HAL_GetTick>
 8001a70:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	05d9      	lsls	r1, r3, #23
 8001a76:	d51b      	bpl.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a78:	4c23      	ldr	r4, [pc, #140]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001a7a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a7c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a80:	d11c      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a82:	68eb      	ldr	r3, [r5, #12]
 8001a84:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001a88:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001a8e:	d134      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001a90:	6891      	ldr	r1, [r2, #8]
 8001a92:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001a96:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a9a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001a9e:	4301      	orrs	r1, r0
 8001aa0:	6091      	str	r1, [r2, #8]
 8001aa2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001aac:	2000      	movs	r0, #0
 8001aae:	e7a3      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ab0:	f7ff f946 	bl	8000d40 <HAL_GetTick>
 8001ab4:	1b80      	subs	r0, r0, r6
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d9db      	bls.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001aba:	e7c4      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001abc:	68ea      	ldr	r2, [r5, #12]
 8001abe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d0dd      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001ad6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ad8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001ada:	07da      	lsls	r2, r3, #31
 8001adc:	d5d1      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001ade:	f7ff f92f 	bl	8000d40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ae6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001aea:	079b      	lsls	r3, r3, #30
 8001aec:	d4c9      	bmi.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f927 	bl	8000d40 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	42b8      	cmp	r0, r7
 8001af6:	d9f7      	bls.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001af8:	e7a5      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001afa:	6891      	ldr	r1, [r2, #8]
 8001afc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001b00:	e7ce      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001b02:	bf00      	nop
 8001b04:	42470068 	.word	0x42470068
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42470e40 	.word	0x42470e40

08001b14 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001b14:	2801      	cmp	r0, #1
 8001b16:	d120      	bne.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001b1c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001b20:	d004      	beq.n	8001b2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001b22:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001b26:	bf18      	it	ne
 8001b28:	2000      	movne	r0, #0
 8001b2a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b2c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b2e:	490c      	ldr	r1, [pc, #48]	; (8001b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b30:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b32:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b34:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b38:	bf4c      	ite	mi
 8001b3a:	4b0b      	ldrmi	r3, [pc, #44]	; (8001b68 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b3c:	4b0b      	ldrpl	r3, [pc, #44]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b42:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001b46:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b4a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001b4e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001b50:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001b54:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001b58:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001b5a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00bb8000 	.word	0x00bb8000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	00f42400 	.word	0x00f42400

08001b70 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4604      	mov	r4, r0
 8001b74:	460e      	mov	r6, r1
 8001b76:	4615      	mov	r5, r2
 8001b78:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b7a:	6821      	ldr	r1, [r4, #0]
 8001b7c:	688a      	ldr	r2, [r1, #8]
 8001b7e:	ea36 0302 	bics.w	r3, r6, r2
 8001b82:	d001      	beq.n	8001b88 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b84:	2000      	movs	r0, #0
}
 8001b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b88:	1c6b      	adds	r3, r5, #1
 8001b8a:	d0f7      	beq.n	8001b7c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b8c:	f7ff f8d8 	bl	8000d40 <HAL_GetTick>
 8001b90:	1bc0      	subs	r0, r0, r7
 8001b92:	4285      	cmp	r5, r0
 8001b94:	d8f1      	bhi.n	8001b7a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b9e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ba0:	6862      	ldr	r2, [r4, #4]
 8001ba2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ba6:	d10a      	bne.n	8001bbe <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001ba8:	68a2      	ldr	r2, [r4, #8]
 8001baa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bae:	d002      	beq.n	8001bb6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001bb4:	d103      	bne.n	8001bbe <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001bc4:	d107      	bne.n	8001bd6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bd4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001be2:	2003      	movs	r0, #3
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001be6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001be6:	b538      	push	{r3, r4, r5, lr}
 8001be8:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bea:	6842      	ldr	r2, [r0, #4]
 8001bec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001bf0:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf2:	d11f      	bne.n	8001c34 <SPI_EndRxTransaction+0x4e>
 8001bf4:	6882      	ldr	r2, [r0, #8]
 8001bf6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bfa:	d002      	beq.n	8001c02 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bfc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c00:	d107      	bne.n	8001c12 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001c06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8001c0a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001c0e:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001c10:	d007      	beq.n	8001c22 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c12:	460a      	mov	r2, r1
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ffaa 	bl	8001b70 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001c1c:	b920      	cbnz	r0, 8001c28 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c22:	460a      	mov	r2, r1
 8001c24:	2101      	movs	r1, #1
 8001c26:	e7f6      	b.n	8001c16 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c2a:	f043 0320 	orr.w	r3, r3, #32
 8001c2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c30:	2003      	movs	r0, #3
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c34:	460a      	mov	r2, r1
 8001c36:	2101      	movs	r1, #1
 8001c38:	e7ee      	b.n	8001c18 <SPI_EndRxTransaction+0x32>
	...

08001c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c3e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <SPI_EndRxTxTransaction+0x54>)
 8001c42:	4e14      	ldr	r6, [pc, #80]	; (8001c94 <SPI_EndRxTxTransaction+0x58>)
 8001c44:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c46:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c48:	fbb5 f6f6 	udiv	r6, r5, r6
 8001c4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001c50:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c52:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001c56:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c58:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5a:	d10d      	bne.n	8001c78 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	f7ff ff86 	bl	8001b70 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001c64:	b910      	cbnz	r0, 8001c6c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001c66:	2000      	movs	r0, #0
}
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e7f7      	b.n	8001c68 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f3      	beq.n	8001c66 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	d4f5      	bmi.n	8001c78 <SPI_EndRxTxTransaction+0x3c>
 8001c8c:	e7eb      	b.n	8001c66 <SPI_EndRxTxTransaction+0x2a>
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	016e3600 	.word	0x016e3600

08001c98 <HAL_SPI_Init>:
{
 8001c98:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d036      	beq.n	8001d0e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ca4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ca8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cac:	b91b      	cbnz	r3, 8001cb6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001cae:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001cb2:	f001 f859 	bl	8002d68 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001cb6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cb8:	68a0      	ldr	r0, [r4, #8]
 8001cba:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001cc2:	680b      	ldr	r3, [r1, #0]
 8001cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cca:	6863      	ldr	r3, [r4, #4]
 8001ccc:	4303      	orrs	r3, r0
 8001cce:	68e0      	ldr	r0, [r4, #12]
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	6920      	ldr	r0, [r4, #16]
 8001cd4:	4303      	orrs	r3, r0
 8001cd6:	6960      	ldr	r0, [r4, #20]
 8001cd8:	4303      	orrs	r3, r0
 8001cda:	69e0      	ldr	r0, [r4, #28]
 8001cdc:	4303      	orrs	r3, r0
 8001cde:	6a20      	ldr	r0, [r4, #32]
 8001ce0:	4303      	orrs	r3, r0
 8001ce2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001cea:	4303      	orrs	r3, r0
 8001cec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cee:	0c12      	lsrs	r2, r2, #16
 8001cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cf2:	f002 0204 	and.w	r2, r2, #4
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cfa:	69cb      	ldr	r3, [r1, #28]
 8001cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d00:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d02:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d04:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d06:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001d0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d0e:	2001      	movs	r0, #1
}
 8001d10:	bd10      	pop	{r4, pc}

08001d12 <HAL_SPI_Transmit>:
{
 8001d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d16:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001d18:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001d1c:	2b01      	cmp	r3, #1
{
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001d24:	f000 809b 	beq.w	8001e5e <HAL_SPI_Transmit+0x14c>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d2e:	f7ff f807 	bl	8000d40 <HAL_GetTick>
 8001d32:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d34:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001d38:	b2c0      	uxtb	r0, r0
 8001d3a:	2801      	cmp	r0, #1
 8001d3c:	f040 808d 	bne.w	8001e5a <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	d05d      	beq.n	8001e00 <HAL_SPI_Transmit+0xee>
 8001d44:	f1b8 0f00 	cmp.w	r8, #0
 8001d48:	d05a      	beq.n	8001e00 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d50:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d52:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d54:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d56:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d58:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001d5c:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d5e:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d60:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d62:	6420      	str	r0, [r4, #64]	; 0x40
 8001d64:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d66:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001d6c:	bf08      	it	eq
 8001d6e:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001d70:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001d74:	bf04      	itt	eq
 8001d76:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001d7a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001d80:	bf5e      	ittt	pl
 8001d82:	6803      	ldrpl	r3, [r0, #0]
 8001d84:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001d88:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	d13e      	bne.n	8001e12 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d94:	b113      	cbz	r3, 8001d9c <HAL_SPI_Transmit+0x8a>
 8001d96:	f1b8 0f01 	cmp.w	r8, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d9c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001da0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001da4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001dac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b9a3      	cbnz	r3, 8001ddc <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db2:	463a      	mov	r2, r7
 8001db4:	4631      	mov	r1, r6
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff ff40 	bl	8001c3c <SPI_EndRxTxTransaction>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d149      	bne.n	8001e54 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dc0:	68a3      	ldr	r3, [r4, #8]
 8001dc2:	b933      	cbnz	r3, 8001dd2 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001dd4:	3000      	adds	r0, #0
 8001dd6:	bf18      	it	ne
 8001dd8:	2001      	movne	r0, #1
 8001dda:	e011      	b.n	8001e00 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	6893      	ldr	r3, [r2, #8]
 8001de0:	0798      	lsls	r0, r3, #30
 8001de2:	d505      	bpl.n	8001df0 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001de6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001dea:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dec:	6323      	str	r3, [r4, #48]	; 0x30
 8001dee:	e7d9      	b.n	8001da4 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df0:	f7fe ffa6 	bl	8000d40 <HAL_GetTick>
 8001df4:	1bc0      	subs	r0, r0, r7
 8001df6:	42b0      	cmp	r0, r6
 8001df8:	d3d8      	bcc.n	8001dac <HAL_SPI_Transmit+0x9a>
 8001dfa:	1c71      	adds	r1, r6, #1
 8001dfc:	d0d6      	beq.n	8001dac <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e06:	2300      	movs	r3, #0
 8001e08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e0c:	b002      	add	sp, #8
 8001e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e12:	b113      	cbz	r3, 8001e1a <HAL_SPI_Transmit+0x108>
 8001e14:	f1b8 0f01 	cmp.w	r8, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e1a:	782b      	ldrb	r3, [r5, #0]
 8001e1c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e20:	3301      	adds	r3, #1
 8001e22:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0be      	beq.n	8001db2 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	0792      	lsls	r2, r2, #30
 8001e3a:	d503      	bpl.n	8001e44 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e3e:	7812      	ldrb	r2, [r2, #0]
 8001e40:	731a      	strb	r2, [r3, #12]
 8001e42:	e7ec      	b.n	8001e1e <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e44:	f7fe ff7c 	bl	8000d40 <HAL_GetTick>
 8001e48:	1bc0      	subs	r0, r0, r7
 8001e4a:	4286      	cmp	r6, r0
 8001e4c:	d8ee      	bhi.n	8001e2c <HAL_SPI_Transmit+0x11a>
 8001e4e:	1c73      	adds	r3, r6, #1
 8001e50:	d0ec      	beq.n	8001e2c <HAL_SPI_Transmit+0x11a>
 8001e52:	e7d4      	b.n	8001dfe <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e54:	2320      	movs	r3, #32
 8001e56:	6563      	str	r3, [r4, #84]	; 0x54
 8001e58:	e7b2      	b.n	8001dc0 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	e7d0      	b.n	8001e00 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001e5e:	2002      	movs	r0, #2
 8001e60:	e7d4      	b.n	8001e0c <HAL_SPI_Transmit+0xfa>

08001e62 <HAL_SPI_TransmitReceive>:
{
 8001e62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e66:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001e68:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001e6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001e6e:	2b01      	cmp	r3, #1
{
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
 8001e74:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001e76:	f000 80e2 	beq.w	800203e <HAL_SPI_TransmitReceive+0x1dc>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e80:	f7fe ff5e 	bl	8000d40 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001e84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001e88:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001e8a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e8c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001e8e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e90:	d00a      	beq.n	8001ea8 <HAL_SPI_TransmitReceive+0x46>
 8001e92:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001e96:	f040 80d0 	bne.w	800203a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e9a:	68a0      	ldr	r0, [r4, #8]
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	f040 80cc 	bne.w	800203a <HAL_SPI_TransmitReceive+0x1d8>
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	f040 80c9 	bne.w	800203a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	f000 80c4 	beq.w	8002036 <HAL_SPI_TransmitReceive+0x1d4>
 8001eae:	f1b9 0f00 	cmp.w	r9, #0
 8001eb2:	f000 80c0 	beq.w	8002036 <HAL_SPI_TransmitReceive+0x1d4>
 8001eb6:	2e00      	cmp	r6, #0
 8001eb8:	f000 80bd 	beq.w	8002036 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ebc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ec0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ec4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ec6:	bf1c      	itt	ne
 8001ec8:	2305      	movne	r3, #5
 8001eca:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001ed2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ed4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ed8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001eda:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001edc:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001ede:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001ee2:	bf58      	it	pl
 8001ee4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ee6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001ee8:	bf58      	it	pl
 8001eea:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001eee:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001ef0:	bf58      	it	pl
 8001ef2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef4:	68e2      	ldr	r2, [r4, #12]
 8001ef6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001efa:	d158      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efc:	b109      	cbz	r1, 8001f02 <HAL_SPI_TransmitReceive+0xa0>
 8001efe:	2e01      	cmp	r6, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f02:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f06:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f0a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f12:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b9ab      	cbnz	r3, 8001f46 <HAL_SPI_TransmitReceive+0xe4>
 8001f1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b993      	cbnz	r3, 8001f46 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f20:	4642      	mov	r2, r8
 8001f22:	4639      	mov	r1, r7
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fe89 	bl	8001c3c <SPI_EndRxTxTransaction>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	f040 8081 	bne.w	8002032 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f30:	68a3      	ldr	r3, [r4, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d132      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	9001      	str	r0, [sp, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	9b01      	ldr	r3, [sp, #4]
 8001f44:	e02a      	b.n	8001f9c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f46:	6822      	ldr	r2, [r4, #0]
 8001f48:	6893      	ldr	r3, [r2, #8]
 8001f4a:	0799      	lsls	r1, r3, #30
 8001f4c:	d50d      	bpl.n	8001f6a <HAL_SPI_TransmitReceive+0x108>
 8001f4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b153      	cbz	r3, 8001f6a <HAL_SPI_TransmitReceive+0x108>
 8001f54:	b14d      	cbz	r5, 8001f6a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f58:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001f5c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001f68:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f6a:	6893      	ldr	r3, [r2, #8]
 8001f6c:	07db      	lsls	r3, r3, #31
 8001f6e:	d50c      	bpl.n	8001f8a <HAL_SPI_TransmitReceive+0x128>
 8001f70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b14b      	cbz	r3, 8001f8a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f78:	68d2      	ldr	r2, [r2, #12]
 8001f7a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f7e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001f88:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f8a:	f7fe fed9 	bl	8000d40 <HAL_GetTick>
 8001f8e:	eba0 0008 	sub.w	r0, r0, r8
 8001f92:	4287      	cmp	r7, r0
 8001f94:	d8be      	bhi.n	8001f14 <HAL_SPI_TransmitReceive+0xb2>
 8001f96:	1c7e      	adds	r6, r7, #1
 8001f98:	d0bc      	beq.n	8001f14 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001fa8:	b003      	add	sp, #12
 8001faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fae:	b109      	cbz	r1, 8001fb4 <HAL_SPI_TransmitReceive+0x152>
 8001fb0:	2e01      	cmp	r6, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fb4:	782a      	ldrb	r2, [r5, #0]
 8001fb6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fba:	3301      	adds	r3, #1
 8001fbc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001fbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001fc6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b91b      	cbnz	r3, 8001fd6 <HAL_SPI_TransmitReceive+0x174>
 8001fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0a4      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd6:	6822      	ldr	r2, [r4, #0]
 8001fd8:	6893      	ldr	r3, [r2, #8]
 8001fda:	0798      	lsls	r0, r3, #30
 8001fdc:	d50e      	bpl.n	8001ffc <HAL_SPI_TransmitReceive+0x19a>
 8001fde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b15b      	cbz	r3, 8001ffc <HAL_SPI_TransmitReceive+0x19a>
 8001fe4:	b155      	cbz	r5, 8001ffc <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001fec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fee:	3301      	adds	r3, #1
 8001ff0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001ffa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	6893      	ldr	r3, [r2, #8]
 8002000:	07d9      	lsls	r1, r3, #31
 8002002:	d50d      	bpl.n	8002020 <HAL_SPI_TransmitReceive+0x1be>
 8002004:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002006:	b29b      	uxth	r3, r3
 8002008:	b153      	cbz	r3, 8002020 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800200a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002012:	3301      	adds	r3, #1
 8002014:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002016:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002018:	3b01      	subs	r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800201e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002020:	f7fe fe8e 	bl	8000d40 <HAL_GetTick>
 8002024:	eba0 0008 	sub.w	r0, r0, r8
 8002028:	4287      	cmp	r7, r0
 800202a:	d8cd      	bhi.n	8001fc8 <HAL_SPI_TransmitReceive+0x166>
 800202c:	1c7b      	adds	r3, r7, #1
 800202e:	d0cb      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x166>
 8002030:	e7b3      	b.n	8001f9a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002032:	2320      	movs	r3, #32
 8002034:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002036:	2001      	movs	r0, #1
 8002038:	e7b0      	b.n	8001f9c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800203a:	2002      	movs	r0, #2
 800203c:	e7ae      	b.n	8001f9c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800203e:	2002      	movs	r0, #2
 8002040:	e7b2      	b.n	8001fa8 <HAL_SPI_TransmitReceive+0x146>

08002042 <HAL_SPI_Receive>:
{
 8002042:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002046:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002048:	6843      	ldr	r3, [r0, #4]
 800204a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800204e:	4604      	mov	r4, r0
 8002050:	4688      	mov	r8, r1
 8002052:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002054:	d10c      	bne.n	8002070 <HAL_SPI_Receive+0x2e>
 8002056:	6883      	ldr	r3, [r0, #8]
 8002058:	b953      	cbnz	r3, 8002070 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800205a:	2304      	movs	r3, #4
 800205c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002060:	4613      	mov	r3, r2
 8002062:	9500      	str	r5, [sp, #0]
 8002064:	460a      	mov	r2, r1
 8002066:	f7ff fefc 	bl	8001e62 <HAL_SPI_TransmitReceive>
}
 800206a:	b002      	add	sp, #8
 800206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002070:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002074:	2b01      	cmp	r3, #1
 8002076:	d079      	beq.n	800216c <HAL_SPI_Receive+0x12a>
 8002078:	2301      	movs	r3, #1
 800207a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800207e:	f7fe fe5f 	bl	8000d40 <HAL_GetTick>
 8002082:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002084:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002088:	b2c0      	uxtb	r0, r0
 800208a:	2801      	cmp	r0, #1
 800208c:	d16c      	bne.n	8002168 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800208e:	f1b8 0f00 	cmp.w	r8, #0
 8002092:	d057      	beq.n	8002144 <HAL_SPI_Receive+0x102>
 8002094:	2f00      	cmp	r7, #0
 8002096:	d055      	beq.n	8002144 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002098:	2304      	movs	r3, #4
 800209a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020a2:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 80020a4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 80020a6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020a8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020aa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020ac:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ae:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 80020b0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b6:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020b8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 80020bc:	bf02      	ittt	eq
 80020be:	681a      	ldreq	r2, [r3, #0]
 80020c0:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80020c4:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80020ca:	bf5e      	ittt	pl
 80020cc:	681a      	ldrpl	r2, [r3, #0]
 80020ce:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80020d2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020d4:	68e3      	ldr	r3, [r4, #12]
 80020d6:	b1f3      	cbz	r3, 8002116 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 80020d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b1fb      	cbz	r3, 800211e <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	07d2      	lsls	r2, r2, #31
 80020e4:	d535      	bpl.n	8002152 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020ea:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80020f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80020f8:	e7ee      	b.n	80020d8 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	07d0      	lsls	r0, r2, #31
 8002100:	d518      	bpl.n	8002134 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002102:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002104:	7b1b      	ldrb	r3, [r3, #12]
 8002106:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800210a:	3301      	adds	r3, #1
 800210c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800210e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002110:	3b01      	subs	r3, #1
 8002112:	b29b      	uxth	r3, r3
 8002114:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002116:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ed      	bne.n	80020fa <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800211e:	4632      	mov	r2, r6
 8002120:	4629      	mov	r1, r5
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff fd5f 	bl	8001be6 <SPI_EndRxTransaction>
 8002128:	b9d8      	cbnz	r0, 8002162 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800212a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800212c:	3000      	adds	r0, #0
 800212e:	bf18      	it	ne
 8002130:	2001      	movne	r0, #1
 8002132:	e007      	b.n	8002144 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002134:	f7fe fe04 	bl	8000d40 <HAL_GetTick>
 8002138:	1b80      	subs	r0, r0, r6
 800213a:	4285      	cmp	r5, r0
 800213c:	d8eb      	bhi.n	8002116 <HAL_SPI_Receive+0xd4>
 800213e:	1c69      	adds	r1, r5, #1
 8002140:	d0e9      	beq.n	8002116 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002144:	2301      	movs	r3, #1
 8002146:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800214a:	2300      	movs	r3, #0
 800214c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002150:	e78b      	b.n	800206a <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002152:	f7fe fdf5 	bl	8000d40 <HAL_GetTick>
 8002156:	1b80      	subs	r0, r0, r6
 8002158:	4285      	cmp	r5, r0
 800215a:	d8bd      	bhi.n	80020d8 <HAL_SPI_Receive+0x96>
 800215c:	1c6b      	adds	r3, r5, #1
 800215e:	d0bb      	beq.n	80020d8 <HAL_SPI_Receive+0x96>
 8002160:	e7ef      	b.n	8002142 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002162:	2320      	movs	r3, #32
 8002164:	6563      	str	r3, [r4, #84]	; 0x54
 8002166:	e7e0      	b.n	800212a <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002168:	2002      	movs	r0, #2
 800216a:	e7eb      	b.n	8002144 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 800216c:	2002      	movs	r0, #2
 800216e:	e77c      	b.n	800206a <HAL_SPI_Receive+0x28>

08002170 <HAL_SPI_ErrorCallback>:
 8002170:	4770      	bx	lr
	...

08002174 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002174:	6803      	ldr	r3, [r0, #0]
{
 8002176:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002178:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800217a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800217c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002180:	2d01      	cmp	r5, #1
{
 8002182:	b085      	sub	sp, #20
 8002184:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002186:	d105      	bne.n	8002194 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002188:	064d      	lsls	r5, r1, #25
 800218a:	d503      	bpl.n	8002194 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 800218c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800218e:	4798      	blx	r3
}
 8002190:	b005      	add	sp, #20
 8002192:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002194:	0795      	lsls	r5, r2, #30
 8002196:	d504      	bpl.n	80021a2 <HAL_SPI_IRQHandler+0x2e>
 8002198:	0608      	lsls	r0, r1, #24
 800219a:	d502      	bpl.n	80021a2 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800219c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800219e:	4620      	mov	r0, r4
 80021a0:	e7f5      	b.n	800218e <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021a2:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80021a6:	d0f3      	beq.n	8002190 <HAL_SPI_IRQHandler+0x1c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021a8:	068d      	lsls	r5, r1, #26
 80021aa:	d5f1      	bpl.n	8002190 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021ac:	0650      	lsls	r0, r2, #25
 80021ae:	d50f      	bpl.n	80021d0 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021b0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80021b4:	2803      	cmp	r0, #3
 80021b6:	f04f 0500 	mov.w	r5, #0
 80021ba:	d04c      	beq.n	8002256 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021be:	f040 0004 	orr.w	r0, r0, #4
 80021c2:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021c4:	9500      	str	r5, [sp, #0]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	9000      	str	r0, [sp, #0]
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	9000      	str	r0, [sp, #0]
 80021ce:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80021d0:	0695      	lsls	r5, r2, #26
 80021d2:	d50c      	bpl.n	80021ee <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80021d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021d6:	f040 0001 	orr.w	r0, r0, #1
 80021da:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021dc:	2000      	movs	r0, #0
 80021de:	9002      	str	r0, [sp, #8]
 80021e0:	6898      	ldr	r0, [r3, #8]
 80021e2:	9002      	str	r0, [sp, #8]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80021ea:	6018      	str	r0, [r3, #0]
 80021ec:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80021ee:	05d0      	lsls	r0, r2, #23
 80021f0:	d508      	bpl.n	8002204 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80021f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80021fa:	2200      	movs	r2, #0
 80021fc:	9203      	str	r2, [sp, #12]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	9203      	str	r2, [sp, #12]
 8002202:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002204:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002206:	2a00      	cmp	r2, #0
 8002208:	d0c2      	beq.n	8002190 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002210:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002212:	2201      	movs	r2, #1
 8002214:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002218:	078a      	lsls	r2, r1, #30
 800221a:	d023      	beq.n	8002264 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800221c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800221e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002220:	f022 0203 	bic.w	r2, r2, #3
 8002224:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002226:	b140      	cbz	r0, 800223a <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_SPI_IRQHandler+0xf8>)
 800222a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800222c:	f7fe fe0c 	bl	8000e48 <HAL_DMA_Abort_IT>
 8002230:	b118      	cbz	r0, 800223a <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002232:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002238:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800223a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800223c:	2800      	cmp	r0, #0
 800223e:	d0a7      	beq.n	8002190 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_SPI_IRQHandler+0xf8>)
 8002242:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002244:	f7fe fe00 	bl	8000e48 <HAL_DMA_Abort_IT>
 8002248:	2800      	cmp	r0, #0
 800224a:	d0a1      	beq.n	8002190 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800224c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	6563      	str	r3, [r4, #84]	; 0x54
 8002254:	e79c      	b.n	8002190 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002256:	9501      	str	r5, [sp, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	9201      	str	r2, [sp, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	9b01      	ldr	r3, [sp, #4]
        return;
 8002262:	e795      	b.n	8002190 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff ff83 	bl	8002170 <HAL_SPI_ErrorCallback>
 800226a:	e791      	b.n	8002190 <HAL_SPI_IRQHandler+0x1c>
 800226c:	08002271 	.word	0x08002271

08002270 <SPI_DMAAbortOnError>:
{
 8002270:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002272:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002278:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800227a:	f7ff ff79 	bl	8002170 <HAL_SPI_ErrorCallback>
 800227e:	bd08      	pop	{r3, pc}

08002280 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002288:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002292:	2320      	movs	r3, #32
 8002294:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002298:	4770      	bx	lr
	...

0800229c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800229c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229e:	6803      	ldr	r3, [r0, #0]
 80022a0:	68c1      	ldr	r1, [r0, #12]
 80022a2:	691a      	ldr	r2, [r3, #16]
{
 80022a4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ae:	6925      	ldr	r5, [r4, #16]
 80022b0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022b2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022b4:	69c0      	ldr	r0, [r0, #28]
 80022b6:	432a      	orrs	r2, r5
 80022b8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80022ba:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022be:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80022c0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	69a1      	ldr	r1, [r4, #24]
 80022ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022d2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022dc:	d129      	bne.n	8002332 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <UART_SetConfig+0x4e>
 80022e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d120      	bne.n	800232c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ea:	f7ff fb6b 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ee:	6862      	ldr	r2, [r4, #4]
 80022f0:	6825      	ldr	r5, [r4, #0]
 80022f2:	1892      	adds	r2, r2, r2
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	f04f 0119 	mov.w	r1, #25
 80022fc:	415b      	adcs	r3, r3
 80022fe:	fba0 0101 	umull	r0, r1, r0, r1
 8002302:	f7fe fb4b 	bl	800099c <__aeabi_uldivmod>
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	fbb0 f4f1 	udiv	r4, r0, r1
 800230c:	fb01 0314 	mls	r3, r1, r4, r0
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	fbb3 f3f1 	udiv	r3, r3, r1
 8002318:	f003 0207 	and.w	r2, r3, #7
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002322:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002326:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002328:	60ab      	str	r3, [r5, #8]
 800232a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800232c:	f7ff fb3a 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 8002330:	e7dd      	b.n	80022ee <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002332:	4293      	cmp	r3, r2
 8002334:	d002      	beq.n	800233c <UART_SetConfig+0xa0>
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <UART_SetConfig+0xd8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d116      	bne.n	800236a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800233c:	f7ff fb42 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	6825      	ldr	r5, [r4, #0]
 8002344:	2119      	movs	r1, #25
 8002346:	009a      	lsls	r2, r3, #2
 8002348:	fba0 0101 	umull	r0, r1, r0, r1
 800234c:	0f9b      	lsrs	r3, r3, #30
 800234e:	f7fe fb25 	bl	800099c <__aeabi_uldivmod>
 8002352:	2264      	movs	r2, #100	; 0x64
 8002354:	fbb0 f1f2 	udiv	r1, r0, r2
 8002358:	fb02 0311 	mls	r3, r2, r1, r0
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	3332      	adds	r3, #50	; 0x32
 8002360:	fbb3 f3f2 	udiv	r3, r3, r2
 8002364:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002368:	e7de      	b.n	8002328 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800236a:	f7ff fb1b 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 800236e:	e7e7      	b.n	8002340 <UART_SetConfig+0xa4>
 8002370:	40011000 	.word	0x40011000
 8002374:	40011400 	.word	0x40011400

08002378 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	4604      	mov	r4, r0
 800237c:	460e      	mov	r6, r1
 800237e:	4617      	mov	r7, r2
 8002380:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002382:	6821      	ldr	r1, [r4, #0]
 8002384:	680b      	ldr	r3, [r1, #0]
 8002386:	ea36 0303 	bics.w	r3, r6, r3
 800238a:	d101      	bne.n	8002390 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002390:	1c6b      	adds	r3, r5, #1
 8002392:	d0f7      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002394:	b995      	cbnz	r5, 80023bc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800239e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80023a8:	2320      	movs	r3, #32
 80023aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80023b2:	2300      	movs	r3, #0
 80023b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80023b8:	2003      	movs	r0, #3
 80023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023bc:	f7fe fcc0 	bl	8000d40 <HAL_GetTick>
 80023c0:	1bc0      	subs	r0, r0, r7
 80023c2:	4285      	cmp	r5, r0
 80023c4:	d2dd      	bcs.n	8002382 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80023c6:	e7e6      	b.n	8002396 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023c8 <HAL_UART_Init>:
{
 80023c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023ca:	4604      	mov	r4, r0
 80023cc:	b340      	cbz	r0, 8002420 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023d6:	b91b      	cbnz	r3, 80023e0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023dc:	f000 fd00 	bl	8002de0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023e0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023e2:	2324      	movs	r3, #36	; 0x24
 80023e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023e8:	68d3      	ldr	r3, [r2, #12]
 80023ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ee:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff ff53 	bl	800229c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002406:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800240e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002412:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002416:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800241a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800241e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
}
 8002422:	bd10      	pop	{r4, pc}

08002424 <HAL_UART_Transmit>:
{
 8002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002428:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800242a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800242e:	2b20      	cmp	r3, #32
{
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1
 8002434:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002436:	d151      	bne.n	80024dc <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002438:	2900      	cmp	r1, #0
 800243a:	d04c      	beq.n	80024d6 <HAL_UART_Transmit+0xb2>
 800243c:	2a00      	cmp	r2, #0
 800243e:	d04a      	beq.n	80024d6 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002440:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002444:	2b01      	cmp	r3, #1
 8002446:	d049      	beq.n	80024dc <HAL_UART_Transmit+0xb8>
 8002448:	2301      	movs	r3, #1
 800244a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002452:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002458:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800245c:	f7fe fc70 	bl	8000d40 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002460:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002464:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002466:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800246a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800246e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002470:	b29b      	uxth	r3, r3
 8002472:	b95b      	cbnz	r3, 800248c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	4632      	mov	r2, r6
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff ff7c 	bl	8002378 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002480:	b9a0      	cbnz	r0, 80024ac <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002482:	2320      	movs	r3, #32
 8002484:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800248c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800248e:	3b01      	subs	r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002494:	68a3      	ldr	r3, [r4, #8]
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	4632      	mov	r2, r6
 800249c:	463b      	mov	r3, r7
 800249e:	f04f 0180 	mov.w	r1, #128	; 0x80
 80024a2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a4:	d10e      	bne.n	80024c4 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	f7ff ff67 	bl	8002378 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024aa:	b110      	cbz	r0, 80024b2 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80024ac:	2003      	movs	r0, #3
 80024ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024b2:	882b      	ldrh	r3, [r5, #0]
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ba:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	b943      	cbnz	r3, 80024d2 <HAL_UART_Transmit+0xae>
          pData += 2U;
 80024c0:	3502      	adds	r5, #2
 80024c2:	e7d4      	b.n	800246e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024c4:	f7ff ff58 	bl	8002378 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1ef      	bne.n	80024ac <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	782a      	ldrb	r2, [r5, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	3501      	adds	r5, #1
 80024d4:	e7cb      	b.n	800246e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
 80024d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80024dc:	2002      	movs	r0, #2
}
 80024de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024e2 <HAL_UART_TxCpltCallback>:
 80024e2:	4770      	bx	lr

080024e4 <HAL_UART_RxCpltCallback>:
 80024e4:	4770      	bx	lr

080024e6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024e6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024ea:	2b22      	cmp	r3, #34	; 0x22
{
 80024ec:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024ee:	d136      	bne.n	800255e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024f0:	6883      	ldr	r3, [r0, #8]
 80024f2:	6901      	ldr	r1, [r0, #16]
 80024f4:	6802      	ldr	r2, [r0, #0]
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024fc:	d123      	bne.n	8002546 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024fe:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002500:	b9e9      	cbnz	r1, 800253e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002506:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800250a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800250c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800250e:	3c01      	subs	r4, #1
 8002510:	b2a4      	uxth	r4, r4
 8002512:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002514:	b98c      	cbnz	r4, 800253a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	f022 0220 	bic.w	r2, r2, #32
 800251e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002526:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002530:	2320      	movs	r3, #32
 8002532:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002536:	f7ff ffd5 	bl	80024e4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800253a:	2000      	movs	r0, #0
}
 800253c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f823 2b01 	strh.w	r2, [r3], #1
 8002544:	e7e1      	b.n	800250a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002546:	b921      	cbnz	r1, 8002552 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e7dc      	b.n	800250c <UART_Receive_IT+0x26>
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	6281      	str	r1, [r0, #40]	; 0x28
 8002558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800255c:	e7f7      	b.n	800254e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800255e:	2002      	movs	r0, #2
 8002560:	bd10      	pop	{r4, pc}

08002562 <HAL_UART_ErrorCallback>:
 8002562:	4770      	bx	lr

08002564 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002564:	6803      	ldr	r3, [r0, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002568:	68d9      	ldr	r1, [r3, #12]
{
 800256a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800256c:	0716      	lsls	r6, r2, #28
{
 800256e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002570:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002572:	d107      	bne.n	8002584 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002574:	0696      	lsls	r6, r2, #26
 8002576:	d55c      	bpl.n	8002632 <HAL_UART_IRQHandler+0xce>
 8002578:	068d      	lsls	r5, r1, #26
 800257a:	d55a      	bpl.n	8002632 <HAL_UART_IRQHandler+0xce>
}
 800257c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002580:	f7ff bfb1 	b.w	80024e6 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002584:	f015 0501 	ands.w	r5, r5, #1
 8002588:	d102      	bne.n	8002590 <HAL_UART_IRQHandler+0x2c>
 800258a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800258e:	d050      	beq.n	8002632 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002590:	07d0      	lsls	r0, r2, #31
 8002592:	d505      	bpl.n	80025a0 <HAL_UART_IRQHandler+0x3c>
 8002594:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002596:	bf42      	ittt	mi
 8002598:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800259a:	f043 0301 	orrmi.w	r3, r3, #1
 800259e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a0:	0756      	lsls	r6, r2, #29
 80025a2:	d504      	bpl.n	80025ae <HAL_UART_IRQHandler+0x4a>
 80025a4:	b11d      	cbz	r5, 80025ae <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ae:	0790      	lsls	r0, r2, #30
 80025b0:	d504      	bpl.n	80025bc <HAL_UART_IRQHandler+0x58>
 80025b2:	b11d      	cbz	r5, 80025bc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025bc:	0713      	lsls	r3, r2, #28
 80025be:	d506      	bpl.n	80025ce <HAL_UART_IRQHandler+0x6a>
 80025c0:	068e      	lsls	r6, r1, #26
 80025c2:	d400      	bmi.n	80025c6 <HAL_UART_IRQHandler+0x62>
 80025c4:	b11d      	cbz	r5, 80025ce <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d066      	beq.n	80026a2 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d4:	0695      	lsls	r5, r2, #26
 80025d6:	d504      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x7e>
 80025d8:	0688      	lsls	r0, r1, #26
 80025da:	d502      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80025dc:	4620      	mov	r0, r4
 80025de:	f7ff ff82 	bl	80024e6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025e8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80025ea:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ec:	d402      	bmi.n	80025f4 <HAL_UART_IRQHandler+0x90>
 80025ee:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025f2:	d01a      	beq.n	800262a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80025f4:	f7ff fe44 	bl	8002280 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	0652      	lsls	r2, r2, #25
 80025fe:	d510      	bpl.n	8002622 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002600:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002602:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002608:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800260a:	b150      	cbz	r0, 8002622 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_UART_IRQHandler+0x140>)
 800260e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002610:	f7fe fc1a 	bl	8000e48 <HAL_DMA_Abort_IT>
 8002614:	2800      	cmp	r0, #0
 8002616:	d044      	beq.n	80026a2 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002618:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002620:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff ff9d 	bl	8002562 <HAL_UART_ErrorCallback>
 8002628:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800262a:	f7ff ff9a 	bl	8002562 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002630:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002632:	0616      	lsls	r6, r2, #24
 8002634:	d527      	bpl.n	8002686 <HAL_UART_IRQHandler+0x122>
 8002636:	060d      	lsls	r5, r1, #24
 8002638:	d525      	bpl.n	8002686 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800263a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800263e:	2a21      	cmp	r2, #33	; 0x21
 8002640:	d12f      	bne.n	80026a2 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002642:	68a2      	ldr	r2, [r4, #8]
 8002644:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002648:	6a22      	ldr	r2, [r4, #32]
 800264a:	d117      	bne.n	800267c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800264c:	8811      	ldrh	r1, [r2, #0]
 800264e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002652:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	b979      	cbnz	r1, 8002678 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002658:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800265a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800265c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800265e:	3a01      	subs	r2, #1
 8002660:	b292      	uxth	r2, r2
 8002662:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002664:	b9ea      	cbnz	r2, 80026a2 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002678:	3201      	adds	r2, #1
 800267a:	e7ee      	b.n	800265a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800267c:	1c51      	adds	r1, r2, #1
 800267e:	6221      	str	r1, [r4, #32]
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	e7ea      	b.n	800265c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002686:	0650      	lsls	r0, r2, #25
 8002688:	d50b      	bpl.n	80026a2 <HAL_UART_IRQHandler+0x13e>
 800268a:	064a      	lsls	r2, r1, #25
 800268c:	d509      	bpl.n	80026a2 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002694:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002696:	2320      	movs	r3, #32
 8002698:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800269c:	4620      	mov	r0, r4
 800269e:	f7ff ff20 	bl	80024e2 <HAL_UART_TxCpltCallback>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	080026a9 	.word	0x080026a9

080026a8 <UART_DMAAbortOnError>:
{
 80026a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026b0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026b2:	f7ff ff56 	bl	8002562 <HAL_UART_ErrorCallback>
 80026b6:	bd08      	pop	{r3, pc}

080026b8 <IvmeOlcerVeriOku>:

void IvmeOlcerVeriOku(SPI_HandleTypeDef* hspi,
					 uint8_t *data,
					 uint8_t addr,
					 uint8_t count)
{
 80026b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	f88d 2007 	strb.w	r2, [sp, #7]

		/* Start SPI transmission */
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 80026c2:	2108      	movs	r1, #8
 80026c4:	2200      	movs	r2, #0
 80026c6:	4811      	ldr	r0, [pc, #68]	; (800270c <IvmeOlcerVeriOku+0x54>)
{
 80026c8:	461e      	mov	r6, r3
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 80026ca:	f7fe fcaf 	bl	800102c <HAL_GPIO_WritePin>

		/* Add read bit */
		addr |= 0x80;
 80026ce:	f89d 2007 	ldrb.w	r2, [sp, #7]

		if (count > 1) {
 80026d2:	2e01      	cmp	r6, #1
		addr |= 0x80;
 80026d4:	bf94      	ite	ls
 80026d6:	f062 027f 	ornls	r2, r2, #127	; 0x7f
			/* Add autoincrement bit */
			addr |= 0x40;
 80026da:	f062 023f 	ornhi	r2, r2, #63	; 0x3f
 80026de:	f88d 2007 	strb.w	r2, [sp, #7]
		}

		/* Send address */
	  	HAL_SPI_Transmit(hspi,&addr,1,20);
 80026e2:	f10d 0107 	add.w	r1, sp, #7
 80026e6:	2314      	movs	r3, #20
 80026e8:	2201      	movs	r2, #1
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fb11 	bl	8001d12 <HAL_SPI_Transmit>
		/* Receive data */
	  	HAL_SPI_Receive(hspi, data,1,20);
 80026f0:	2314      	movs	r3, #20
 80026f2:	4629      	mov	r1, r5
 80026f4:	2201      	movs	r2, #1
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fca3 	bl	8002042 <HAL_SPI_Receive>

		/* Stop SPI transmission */
		HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 80026fc:	2201      	movs	r2, #1
 80026fe:	2108      	movs	r1, #8
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <IvmeOlcerVeriOku+0x54>)
 8002702:	f7fe fc93 	bl	800102c <HAL_GPIO_WritePin>





}
 8002706:	b002      	add	sp, #8
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	2230      	movs	r2, #48	; 0x30
{
 8002714:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002716:	eb0d 0002 	add.w	r0, sp, r2
 800271a:	2100      	movs	r1, #0
 800271c:	f000 fc1a 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	2214      	movs	r2, #20
 8002722:	2100      	movs	r1, #0
 8002724:	a807      	add	r0, sp, #28
 8002726:	f000 fc15 	bl	8002f54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800272a:	2100      	movs	r1, #0
 800272c:	2210      	movs	r2, #16
 800272e:	a803      	add	r0, sp, #12
 8002730:	f000 fc10 	bl	8002f54 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	2500      	movs	r5, #0
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <SystemClock_Config+0xac>)
 8002738:	9501      	str	r5, [sp, #4]
 800273a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <SystemClock_Config+0xb0>)
 800274e:	9502      	str	r5, [sp, #8]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002766:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002768:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800276c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800276e:	2308      	movs	r3, #8
 8002770:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002772:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002776:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002778:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 800277a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800277e:	2307      	movs	r3, #7
 8002780:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002782:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002784:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002786:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002788:	f7fe fe9c 	bl	80014c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800278c:	230f      	movs	r3, #15
 800278e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002794:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002796:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800279c:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800279e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027a4:	f7ff f862 	bl	800186c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80027a8:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027aa:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80027ac:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80027ae:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80027b0:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b2:	f7ff f917 	bl	80019e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80027b6:	b018      	add	sp, #96	; 0x60
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000
 80027c4:	00000000 	.word	0x00000000

080027c8 <main>:
{
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80027ce:	f7fe fa91 	bl	8000cf4 <HAL_Init>
  SystemClock_Config();
 80027d2:	f7ff ff9d 	bl	8002710 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	2214      	movs	r2, #20
 80027d8:	2100      	movs	r1, #0
 80027da:	a809      	add	r0, sp, #36	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027dc:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027de:	f000 fbb9 	bl	8002f54 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e2:	4bb7      	ldr	r3, [pc, #732]	; (8002ac0 <main+0x2f8>)
 80027e4:	9603      	str	r6, [sp, #12]
 80027e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 80027e8:	48b6      	ldr	r0, [pc, #728]	; (8002ac4 <main+0x2fc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ea:	f042 0210 	orr.w	r2, r2, #16
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f2:	f002 0210 	and.w	r2, r2, #16
 80027f6:	9203      	str	r2, [sp, #12]
 80027f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	9604      	str	r6, [sp, #16]
 80027fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fe:	f042 0204 	orr.w	r2, r2, #4
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
 8002804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002806:	f002 0204 	and.w	r2, r2, #4
 800280a:	9204      	str	r2, [sp, #16]
 800280c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	9605      	str	r6, [sp, #20]
 8002810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800281e:	9205      	str	r2, [sp, #20]
 8002820:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	9606      	str	r6, [sp, #24]
 8002824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
 800282c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282e:	f002 0201 	and.w	r2, r2, #1
 8002832:	9206      	str	r2, [sp, #24]
 8002834:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	9607      	str	r6, [sp, #28]
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	f042 0202 	orr.w	r2, r2, #2
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	f002 0202 	and.w	r2, r2, #2
 8002846:	9207      	str	r2, [sp, #28]
 8002848:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800284a:	9608      	str	r6, [sp, #32]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002860:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8002862:	f7fe fbe3 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	4611      	mov	r1, r2
 800286a:	4897      	ldr	r0, [pc, #604]	; (8002ac8 <main+0x300>)
 800286c:	f7fe fbde 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002870:	4632      	mov	r2, r6
 8002872:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002876:	4895      	ldr	r0, [pc, #596]	; (8002acc <main+0x304>)
 8002878:	f7fe fbd8 	bl	800102c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002880:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002884:	a909      	add	r1, sp, #36	; 0x24
 8002886:	488f      	ldr	r0, [pc, #572]	; (8002ac4 <main+0x2fc>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002888:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002894:	f7fe faea 	bl	8000e6c <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002898:	a909      	add	r1, sp, #36	; 0x24
 800289a:	488b      	ldr	r0, [pc, #556]	; (8002ac8 <main+0x300>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800289c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a4:	2505      	movs	r5, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f7fe fadd 	bl	8000e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80028b2:	a909      	add	r1, sp, #36	; 0x24
 80028b4:	4884      	ldr	r0, [pc, #528]	; (8002ac8 <main+0x300>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028ba:	2404      	movs	r4, #4
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028bc:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80028be:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f7fe fad1 	bl	8000e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028ca:	a909      	add	r1, sp, #36	; 0x24
 80028cc:	4880      	ldr	r0, [pc, #512]	; (8002ad0 <main+0x308>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f7fe faca 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80028d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80028dc:	a909      	add	r1, sp, #36	; 0x24
 80028de:	487c      	ldr	r0, [pc, #496]	; (8002ad0 <main+0x308>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80028e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e6:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f7fe fabe 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80028f0:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f4:	a909      	add	r1, sp, #36	; 0x24
 80028f6:	4875      	ldr	r0, [pc, #468]	; (8002acc <main+0x304>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80028f8:	9309      	str	r3, [sp, #36]	; 0x24

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80028fa:	f44f 7500 	mov.w	r5, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002906:	f7fe fab1 	bl	8000e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800290a:	a909      	add	r1, sp, #36	; 0x24
 800290c:	4871      	ldr	r0, [pc, #452]	; (8002ad4 <main+0x30c>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800290e:	9509      	str	r5, [sp, #36]	; 0x24
  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002910:	270a      	movs	r7, #10
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002912:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002916:	f7fe faa9 	bl	8000e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800291a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	a909      	add	r1, sp, #36	; 0x24
 8002920:	486c      	ldr	r0, [pc, #432]	; (8002ad4 <main+0x30c>)
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002922:	9309      	str	r3, [sp, #36]	; 0x24

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002924:	f04f 0b20 	mov.w	fp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800292c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f7fe fa9b 	bl	8000e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002936:	a909      	add	r1, sp, #36	; 0x24
 8002938:	4864      	ldr	r0, [pc, #400]	; (8002acc <main+0x304>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800293a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002942:	f7fe fa93 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002946:	f44f 7310 	mov.w	r3, #576	; 0x240
 800294a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800294e:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	485f      	ldr	r0, [pc, #380]	; (8002ad0 <main+0x308>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002952:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002954:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002956:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f7fe fa86 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002960:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002962:	4858      	ldr	r0, [pc, #352]	; (8002ac4 <main+0x2fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002964:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002966:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002968:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800296e:	f7fe fa7d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002972:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002974:	4853      	ldr	r0, [pc, #332]	; (8002ac4 <main+0x2fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002976:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002978:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800297a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002980:	f7fe fa74 	bl	8000e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002984:	4631      	mov	r1, r6
 8002986:	4632      	mov	r2, r6
 8002988:	2006      	movs	r0, #6
 800298a:	f7fe fa05 	bl	8000d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800298e:	2006      	movs	r0, #6
 8002990:	f7fe fa36 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  hi2s3.Instance = SPI3;
 8002994:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <main+0x318>)
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <main+0x31c>)
  hspi1.Instance = SPI1;
 8002998:	4c53      	ldr	r4, [pc, #332]	; (8002ae8 <main+0x320>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800299a:	6105      	str	r5, [r0, #16]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800299c:	e880 0068 	stmia.w	r0, {r3, r5, r6}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <main+0x324>)
 80029a2:	6143      	str	r3, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80029a4:	60c6      	str	r6, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80029a6:	6186      	str	r6, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80029a8:	61c6      	str	r6, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80029aa:	6206      	str	r6, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80029ac:	f7fe fb50 	bl	8001050 <HAL_I2S_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029b0:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <main+0x328>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029b2:	61a5      	str	r5, [r4, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029b4:	f44f 7382 	mov.w	r3, #260	; 0x104
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029b8:	4620      	mov	r0, r4
  huart4.Instance = UART4;
 80029ba:	4d4e      	ldr	r5, [pc, #312]	; (8002af4 <main+0x32c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029bc:	f8c4 b01c 	str.w	fp, [r4, #28]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c0:	e884 000c 	stmia.w	r4, {r2, r3}
  hspi1.Init.CRCPolynomial = 10;
 80029c4:	62e7      	str	r7, [r4, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029c6:	60a6      	str	r6, [r4, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c8:	60e6      	str	r6, [r4, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ca:	6126      	str	r6, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029cc:	6166      	str	r6, [r4, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ce:	6226      	str	r6, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d0:	6266      	str	r6, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d2:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029d4:	f7ff f960 	bl	8001c98 <HAL_SPI_Init>
  huart4.Init.BaudRate = 9600;
 80029d8:	4947      	ldr	r1, [pc, #284]	; (8002af8 <main+0x330>)
  SPI_Tx_Buffer [0] = 0x20;
 80029da:	4f48      	ldr	r7, [pc, #288]	; (8002afc <main+0x334>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029dc:	60ae      	str	r6, [r5, #8]
  huart4.Init.BaudRate = 9600;
 80029de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029e2:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029e6:	4628      	mov	r0, r5
  huart4.Init.Mode = UART_MODE_TX_RX;
 80029e8:	230c      	movs	r3, #12
 80029ea:	616b      	str	r3, [r5, #20]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80029ec:	60ee      	str	r6, [r5, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80029ee:	612e      	str	r6, [r5, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f0:	61ae      	str	r6, [r5, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f2:	61ee      	str	r6, [r5, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029f4:	f7ff fce8 	bl	80023c8 <HAL_UART_Init>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 80029f8:	4632      	mov	r2, r6
 80029fa:	4649      	mov	r1, r9
 80029fc:	4831      	ldr	r0, [pc, #196]	; (8002ac4 <main+0x2fc>)
 80029fe:	f7fe fb15 	bl	800102c <HAL_GPIO_WritePin>
  SPI_Tx_Buffer [1] = 0x17;
 8002a02:	2317      	movs	r3, #23
 8002a04:	707b      	strb	r3, [r7, #1]
  HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,2,50);
 8002a06:	4652      	mov	r2, sl
 8002a08:	2332      	movs	r3, #50	; 0x32
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	4620      	mov	r0, r4
  SPI_Tx_Buffer [0] = 0x20;
 8002a0e:	f887 b000 	strb.w	fp, [r7]
  HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,2,50);
 8002a12:	f7ff f97e 	bl	8001d12 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8002a16:	4642      	mov	r2, r8
 8002a18:	4649      	mov	r1, r9
 8002a1a:	482a      	ldr	r0, [pc, #168]	; (8002ac4 <main+0x2fc>)
 8002a1c:	f7fe fb06 	bl	800102c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8002a20:	4632      	mov	r2, r6
 8002a22:	4649      	mov	r1, r9
 8002a24:	4827      	ldr	r0, [pc, #156]	; (8002ac4 <main+0x2fc>)
 8002a26:	f7fe fb01 	bl	800102c <HAL_GPIO_WritePin>
   SPI_Tx_Buffer[0] = 0x20 | 0x80;
 8002a2a:	23a0      	movs	r3, #160	; 0xa0
 8002a2c:	703b      	strb	r3, [r7, #0]
   HAL_SPI_Transmit(&hspi1,SPI_Tx_Buffer,1,50);
 8002a2e:	4639      	mov	r1, r7
 8002a30:	2332      	movs	r3, #50	; 0x32
 8002a32:	4642      	mov	r2, r8
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff f96c 	bl	8001d12 <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi1, SPI_Rx_Buffer,1,50);
 8002a3a:	2332      	movs	r3, #50	; 0x32
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	4930      	ldr	r1, [pc, #192]	; (8002b00 <main+0x338>)
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff fafe 	bl	8002042 <HAL_SPI_Receive>
			   	   ( (myGlobalStruct.testIvme.testXValue[1] << 8)* 0.06 + myGlobalStruct.testIvme.testXValue[0]* 0.06) ;
 8002a46:	f20f 0b70 	addw	fp, pc, #112	; 0x70
 8002a4a:	e9db ab00 	ldrd	sl, fp, [fp]
   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8002a4e:	4642      	mov	r2, r8
 8002a50:	4649      	mov	r1, r9
 8002a52:	481c      	ldr	r0, [pc, #112]	; (8002ac4 <main+0x2fc>)
 8002a54:	f7fe faea 	bl	800102c <HAL_GPIO_WritePin>
 8002a58:	9700      	str	r7, [sp, #0]
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8002a5a:	4f1a      	ldr	r7, [pc, #104]	; (8002ac4 <main+0x2fc>)
	   HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,1,50);
 8002a5c:	f8cd 8004 	str.w	r8, [sp, #4]
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2108      	movs	r1, #8
 8002a64:	4638      	mov	r0, r7
 8002a66:	f7fe fae1 	bl	800102c <HAL_GPIO_WritePin>
	   SPI_Tx_Buffer [0] = ACCELEROMETER_REGISTER_WHO_I_AM | 0x80;
 8002a6a:	9a00      	ldr	r2, [sp, #0]
	   HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,1,50);
 8002a6c:	4923      	ldr	r1, [pc, #140]	; (8002afc <main+0x334>)
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testXValue[0],0x28,1);
 8002a6e:	4e25      	ldr	r6, [pc, #148]	; (8002b04 <main+0x33c>)
	   SPI_Tx_Buffer [0] = ACCELEROMETER_REGISTER_WHO_I_AM | 0x80;
 8002a70:	238f      	movs	r3, #143	; 0x8f
 8002a72:	7013      	strb	r3, [r2, #0]
	   HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,1,50);
 8002a74:	4620      	mov	r0, r4
 8002a76:	2332      	movs	r3, #50	; 0x32
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f7ff f94a 	bl	8001d12 <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, SPI_Rx_Buffer,1,50);
 8002a7e:	2332      	movs	r3, #50	; 0x32
 8002a80:	2201      	movs	r2, #1
 8002a82:	491f      	ldr	r1, [pc, #124]	; (8002b00 <main+0x338>)
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fadc 	bl	8002042 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f7fe facc 	bl	800102c <HAL_GPIO_WritePin>
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testXValue[0],0x28,1);
 8002a94:	2301      	movs	r3, #1
 8002a96:	2228      	movs	r2, #40	; 0x28
 8002a98:	f106 010c 	add.w	r1, r6, #12
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7ff fe0b 	bl	80026b8 <IvmeOlcerVeriOku>
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testXValue[1],0x29,1);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2229      	movs	r2, #41	; 0x29
 8002aa6:	f106 010d 	add.w	r1, r6, #13
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff fe04 	bl	80026b8 <IvmeOlcerVeriOku>
			   	   ( (myGlobalStruct.testIvme.testXValue[1] << 8)* 0.06 + myGlobalStruct.testIvme.testXValue[0]* 0.06) ;
 8002ab0:	7b70      	ldrb	r0, [r6, #13]
 8002ab2:	0200      	lsls	r0, r0, #8
 8002ab4:	e028      	b.n	8002b08 <main+0x340>
 8002ab6:	bf00      	nop
 8002ab8:	eb851eb8 	.word	0xeb851eb8
 8002abc:	3faeb851 	.word	0x3faeb851
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	10110000 	.word	0x10110000
 8002adc:	10120000 	.word	0x10120000
 8002ae0:	200000e4 	.word	0x200000e4
 8002ae4:	40003c00 	.word	0x40003c00
 8002ae8:	20000088 	.word	0x20000088
 8002aec:	00017700 	.word	0x00017700
 8002af0:	40013000 	.word	0x40013000
 8002af4:	20000048 	.word	0x20000048
 8002af8:	40004c00 	.word	0x40004c00
 8002afc:	20000041 	.word	0x20000041
 8002b00:	20000043 	.word	0x20000043
 8002b04:	20000028 	.word	0x20000028
 8002b08:	f7fd fcb0 	bl	800046c <__aeabi_i2d>
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	465b      	mov	r3, fp
 8002b10:	f7fd fd12 	bl	8000538 <__aeabi_dmul>
 8002b14:	4680      	mov	r8, r0
 8002b16:	7b30      	ldrb	r0, [r6, #12]
 8002b18:	4689      	mov	r9, r1
 8002b1a:	f7fd fca7 	bl	800046c <__aeabi_i2d>
 8002b1e:	4652      	mov	r2, sl
 8002b20:	465b      	mov	r3, fp
 8002b22:	f7fd fd09 	bl	8000538 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	f7fd fb51 	bl	80001d4 <__adddf3>
	   myGlobalStruct.IvmeOlcerVerileri.myXValue =
 8002b32:	f7fd ff13 	bl	800095c <__aeabi_d2uiz>
 8002b36:	4631      	mov	r1, r6
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testYValue[0],0x2A,1);
 8002b38:	2301      	movs	r3, #1
	   myGlobalStruct.IvmeOlcerVerileri.myXValue =
 8002b3a:	f821 0b0e 	strh.w	r0, [r1], #14
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testYValue[0],0x2A,1);
 8002b3e:	222a      	movs	r2, #42	; 0x2a
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff fdb9 	bl	80026b8 <IvmeOlcerVeriOku>
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testYValue[1],0x2B,1);
 8002b46:	2301      	movs	r3, #1
 8002b48:	222b      	movs	r2, #43	; 0x2b
 8002b4a:	f106 010f 	add.w	r1, r6, #15
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff fdb2 	bl	80026b8 <IvmeOlcerVeriOku>
			   	   ( (myGlobalStruct.testIvme.testYValue[1] << 8)* 0.06 + myGlobalStruct.testIvme.testYValue[0]* 0.06) ;
 8002b54:	7bf0      	ldrb	r0, [r6, #15]
 8002b56:	0200      	lsls	r0, r0, #8
 8002b58:	f7fd fc88 	bl	800046c <__aeabi_i2d>
 8002b5c:	4652      	mov	r2, sl
 8002b5e:	465b      	mov	r3, fp
 8002b60:	f7fd fcea 	bl	8000538 <__aeabi_dmul>
 8002b64:	4680      	mov	r8, r0
 8002b66:	7bb0      	ldrb	r0, [r6, #14]
 8002b68:	4689      	mov	r9, r1
 8002b6a:	f7fd fc7f 	bl	800046c <__aeabi_i2d>
 8002b6e:	4652      	mov	r2, sl
 8002b70:	465b      	mov	r3, fp
 8002b72:	f7fd fce1 	bl	8000538 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	f7fd fb29 	bl	80001d4 <__adddf3>
	   myGlobalStruct.IvmeOlcerVerileri.myYValue =
 8002b82:	f7fd feeb 	bl	800095c <__aeabi_d2uiz>
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testZValue[0],0x2C,1);
 8002b86:	2301      	movs	r3, #1
	   myGlobalStruct.IvmeOlcerVerileri.myYValue =
 8002b88:	8070      	strh	r0, [r6, #2]
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testZValue[0],0x2C,1);
 8002b8a:	222c      	movs	r2, #44	; 0x2c
 8002b8c:	f106 0110 	add.w	r1, r6, #16
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff fd91 	bl	80026b8 <IvmeOlcerVeriOku>
	   IvmeOlcerVeriOku(&hspi1,&myGlobalStruct.testIvme.testZValue[1],0x2D,1);
 8002b96:	2301      	movs	r3, #1
 8002b98:	222d      	movs	r2, #45	; 0x2d
 8002b9a:	f106 0111 	add.w	r1, r6, #17
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff fd8a 	bl	80026b8 <IvmeOlcerVeriOku>
			   	   ( (myGlobalStruct.testIvme.testZValue[1] << 8)* 0.06 + myGlobalStruct.testIvme.testZValue[0]* 0.06) ;
 8002ba4:	7c70      	ldrb	r0, [r6, #17]
 8002ba6:	0200      	lsls	r0, r0, #8
 8002ba8:	f7fd fc60 	bl	800046c <__aeabi_i2d>
 8002bac:	4652      	mov	r2, sl
 8002bae:	465b      	mov	r3, fp
 8002bb0:	f7fd fcc2 	bl	8000538 <__aeabi_dmul>
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	7c30      	ldrb	r0, [r6, #16]
 8002bb8:	4689      	mov	r9, r1
 8002bba:	f7fd fc57 	bl	800046c <__aeabi_i2d>
 8002bbe:	4652      	mov	r2, sl
 8002bc0:	465b      	mov	r3, fp
 8002bc2:	f7fd fcb9 	bl	8000538 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4640      	mov	r0, r8
 8002bcc:	4649      	mov	r1, r9
 8002bce:	f7fd fb01 	bl	80001d4 <__adddf3>
	   myGlobalStruct.IvmeOlcerVerileri.myZValue =
 8002bd2:	f7fd fec3 	bl	800095c <__aeabi_d2uiz>
	   	   if(myGlobalStruct.IvmeOlcerVerileri.myXValue > 1916){
 8002bd6:	8832      	ldrh	r2, [r6, #0]
	   myGlobalStruct.IvmeOlcerVerileri.myZValue =
 8002bd8:	80b0      	strh	r0, [r6, #4]
	   	   if(myGlobalStruct.IvmeOlcerVerileri.myXValue > 1916){
 8002bda:	f240 737c 	movw	r3, #1916	; 0x77c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d905      	bls.n	8002bee <main+0x426>
		   HAL_GPIO_WritePin(GPIOD,LD5_Pin, GPIO_PIN_SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be8:	481f      	ldr	r0, [pc, #124]	; (8002c68 <main+0x4a0>)
 8002bea:	f7fe fa1f 	bl	800102c <HAL_GPIO_WritePin>
	   	uint8_t ilkDogrulama = 0x03;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f88d 300b 	strb.w	r3, [sp, #11]
	   	uint8_t ikinciDogrulama = 0x01;
 8002bf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	  	HAL_UART_Transmit(&huart4,&ilkDogrulama, 1,50);
 8002bfc:	f10d 010b 	add.w	r1, sp, #11
 8002c00:	2332      	movs	r3, #50	; 0x32
 8002c02:	2201      	movs	r2, #1
 8002c04:	4628      	mov	r0, r5
 8002c06:	f7ff fc0d 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&ikinciDogrulama, 1,50);
 8002c0a:	a909      	add	r1, sp, #36	; 0x24
 8002c0c:	2332      	movs	r3, #50	; 0x32
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff fc07 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testXValue[0], 1,50);
 8002c16:	2332      	movs	r3, #50	; 0x32
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4914      	ldr	r1, [pc, #80]	; (8002c6c <main+0x4a4>)
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f7ff fc01 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testXValue[1], 1,50);
 8002c22:	2332      	movs	r3, #50	; 0x32
 8002c24:	2201      	movs	r2, #1
 8002c26:	4912      	ldr	r1, [pc, #72]	; (8002c70 <main+0x4a8>)
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f7ff fbfb 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testYValue[0], 1,50);
 8002c2e:	2332      	movs	r3, #50	; 0x32
 8002c30:	2201      	movs	r2, #1
 8002c32:	4910      	ldr	r1, [pc, #64]	; (8002c74 <main+0x4ac>)
 8002c34:	4628      	mov	r0, r5
 8002c36:	f7ff fbf5 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testYValue[1], 1,50);
 8002c3a:	2332      	movs	r3, #50	; 0x32
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	490e      	ldr	r1, [pc, #56]	; (8002c78 <main+0x4b0>)
 8002c40:	4628      	mov	r0, r5
 8002c42:	f7ff fbef 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testZValue[0], 1,50);
 8002c46:	2332      	movs	r3, #50	; 0x32
 8002c48:	2201      	movs	r2, #1
 8002c4a:	490c      	ldr	r1, [pc, #48]	; (8002c7c <main+0x4b4>)
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f7ff fbe9 	bl	8002424 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart4,&myGlobalStruct.testIvme.testZValue[1], 1,50);
 8002c52:	2332      	movs	r3, #50	; 0x32
 8002c54:	2201      	movs	r2, #1
 8002c56:	490a      	ldr	r1, [pc, #40]	; (8002c80 <main+0x4b8>)
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff fbe3 	bl	8002424 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8002c5e:	2032      	movs	r0, #50	; 0x32
 8002c60:	f7fe f874 	bl	8000d4c <HAL_Delay>
  {
 8002c64:	e6fc      	b.n	8002a60 <main+0x298>
 8002c66:	bf00      	nop
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	20000034 	.word	0x20000034
 8002c70:	20000035 	.word	0x20000035
 8002c74:	20000036 	.word	0x20000036
 8002c78:	20000037 	.word	0x20000037
 8002c7c:	20000038 	.word	0x20000038
 8002c80:	20000039 	.word	0x20000039

08002c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_MspInit+0x3c>)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	9100      	str	r1, [sp, #0]
 8002c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
 8002c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c9a:	9200      	str	r2, [sp, #0]
 8002c9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	9101      	str	r1, [sp, #4]
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cb0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cb4:	f7fe f85e 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb8:	b003      	add	sp, #12
 8002cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	2214      	movs	r2, #20
 8002ccc:	2100      	movs	r1, #0
 8002cce:	a803      	add	r0, sp, #12
 8002cd0:	f000 f940 	bl	8002f54 <memset>
  if(hi2s->Instance==SPI3)
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_I2S_MspInit+0x98>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d13d      	bne.n	8002d58 <HAL_I2S_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002cdc:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	9400      	str	r4, [sp, #0]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	481e      	ldr	r0, [pc, #120]	; (8002d60 <HAL_I2S_MspInit+0x9c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002cf4:	9200      	str	r2, [sp, #0]
 8002cf6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	9401      	str	r4, [sp, #4]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
 8002d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d04:	f002 0201 	and.w	r2, r2, #1
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0c:	9402      	str	r4, [sp, #8]
 8002d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d10:	f042 0204 	orr.w	r2, r2, #4
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002d22:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d24:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002d28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d2c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	f7fe f89d 	bl	8000e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002d32:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d36:	a903      	add	r1, sp, #12
 8002d38:	480a      	ldr	r0, [pc, #40]	; (8002d64 <HAL_I2S_MspInit+0xa0>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002d3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d42:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f7fe f892 	bl	8000e6c <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002d48:	2033      	movs	r0, #51	; 0x33
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	f7fe f823 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002d52:	2033      	movs	r0, #51	; 0x33
 8002d54:	f7fe f854 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d58:	b008      	add	sp, #32
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	40003c00 	.word	0x40003c00
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020800 	.word	0x40020800

08002d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	2214      	movs	r2, #20
 8002d70:	2100      	movs	r1, #0
 8002d72:	a803      	add	r0, sp, #12
 8002d74:	f000 f8ee 	bl	8002f54 <memset>
  if(hspi->Instance==SPI1)
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_SPI_MspInit+0x70>)
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d128      	bne.n	8002dd2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d80:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002d84:	2400      	movs	r4, #0
 8002d86:	9401      	str	r4, [sp, #4]
 8002d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
 8002d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d98:	9201      	str	r2, [sp, #4]
 8002d9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	9402      	str	r4, [sp, #8]
 8002d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002db0:	23e0      	movs	r3, #224	; 0xe0
 8002db2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dba:	2305      	movs	r3, #5
 8002dbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f7fe f855 	bl	8000e6c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002dc2:	2023      	movs	r0, #35	; 0x23
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	f7fd ffe6 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002dcc:	2023      	movs	r0, #35	; 0x23
 8002dce:	f7fe f817 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dd2:	b008      	add	sp, #32
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40013000 	.word	0x40013000
 8002ddc:	40020000 	.word	0x40020000

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	2214      	movs	r2, #20
 8002de8:	2100      	movs	r1, #0
 8002dea:	a803      	add	r0, sp, #12
 8002dec:	f000 f8b2 	bl	8002f54 <memset>
  if(huart->Instance==UART4)
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_UART_MspInit+0x74>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d12b      	bne.n	8002e50 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002df8:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	9401      	str	r4, [sp, #4]
 8002e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	4815      	ldr	r0, [pc, #84]	; (8002e58 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002e10:	9201      	str	r2, [sp, #4]
 8002e12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	9402      	str	r4, [sp, #8]
 8002e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e32:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e34:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e38:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f7fe f816 	bl	8000e6c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002e40:	2034      	movs	r0, #52	; 0x34
 8002e42:	4622      	mov	r2, r4
 8002e44:	4621      	mov	r1, r4
 8002e46:	f7fd ffa7 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e4a:	2034      	movs	r0, #52	; 0x34
 8002e4c:	f7fd ffd8 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002e50:	b008      	add	sp, #32
 8002e52:	bd10      	pop	{r4, pc}
 8002e54:	40004c00 	.word	0x40004c00
 8002e58:	40020000 	.word	0x40020000

08002e5c <NMI_Handler>:
 8002e5c:	4770      	bx	lr

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	e7fe      	b.n	8002e5e <HardFault_Handler>

08002e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e60:	e7fe      	b.n	8002e60 <MemManage_Handler>

08002e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	e7fe      	b.n	8002e64 <UsageFault_Handler>

08002e66 <SVC_Handler>:
 8002e66:	4770      	bx	lr

08002e68 <DebugMon_Handler>:
 8002e68:	4770      	bx	lr

08002e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6a:	4770      	bx	lr

08002e6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6c:	f7fd bf5c 	b.w	8000d28 <HAL_IncTick>

08002e70 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7fe b8e1 	b.w	8001038 <HAL_GPIO_EXTI_IRQHandler>
	...

08002e78 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <SPI1_IRQHandler+0x8>)
 8002e7a:	f7ff b97b 	b.w	8002174 <HAL_SPI_IRQHandler>
 8002e7e:	bf00      	nop
 8002e80:	20000088 	.word	0x20000088

08002e84 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <SPI3_IRQHandler+0x8>)
 8002e86:	f7fe b97b 	b.w	8001180 <HAL_I2S_IRQHandler>
 8002e8a:	bf00      	nop
 8002e8c:	200000e4 	.word	0x200000e4

08002e90 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <UART4_IRQHandler+0x8>)
 8002e92:	f7ff bb67 	b.w	8002564 <HAL_UART_IRQHandler>
 8002e96:	bf00      	nop
 8002e98:	20000048 	.word	0x20000048

08002e9c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SystemInit+0x18>)
 8002e9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ea2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ebe:	e003      	b.n	8002ec8 <LoopCopyDataInit>

08002ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ec6:	3104      	adds	r1, #4

08002ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec8:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ed0:	d3f6      	bcc.n	8002ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ed4:	e002      	b.n	8002edc <LoopFillZerobss>

08002ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ed8:	f842 3b04 	str.w	r3, [r2], #4

08002edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ee0:	d3f9      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ee2:	f7ff ffdb 	bl	8002e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f000 f811 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7ff fc6d 	bl	80027c8 <main>
  bx  lr    
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ef0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ef4:	08002fa4 	.word	0x08002fa4
  ldr  r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002efc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f00:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f04:	2000012c 	.word	0x2000012c

08002f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC_IRQHandler>
	...

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4e0d      	ldr	r6, [pc, #52]	; (8002f44 <__libc_init_array+0x38>)
 8002f10:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f12:	1ba4      	subs	r4, r4, r6
 8002f14:	10a4      	asrs	r4, r4, #2
 8002f16:	2500      	movs	r5, #0
 8002f18:	42a5      	cmp	r5, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	4e0b      	ldr	r6, [pc, #44]	; (8002f4c <__libc_init_array+0x40>)
 8002f1e:	4c0c      	ldr	r4, [pc, #48]	; (8002f50 <__libc_init_array+0x44>)
 8002f20:	f000 f820 	bl	8002f64 <_init>
 8002f24:	1ba4      	subs	r4, r4, r6
 8002f26:	10a4      	asrs	r4, r4, #2
 8002f28:	2500      	movs	r5, #0
 8002f2a:	42a5      	cmp	r5, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f34:	4798      	blx	r3
 8002f36:	3501      	adds	r5, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3e:	4798      	blx	r3
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08002f9c 	.word	0x08002f9c
 8002f48:	08002f9c 	.word	0x08002f9c
 8002f4c:	08002f9c 	.word	0x08002f9c
 8002f50:	08002fa0 	.word	0x08002fa0

08002f54 <memset>:
 8002f54:	4402      	add	r2, r0
 8002f56:	4603      	mov	r3, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <_init>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr

08002f70 <_fini>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr
