
IvmeOlcer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002070  08002070  00012070  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800208c  0800208c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200000d8  200000d8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000aee0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ec7  00000000  00000000  0002af1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004245  00000000  00000000  0002cde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00031028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  00031738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003e6e  00000000  00000000  00032040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002a55  00000000  00000000  00035eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00038903  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000136c  00000000  00000000  00038980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002058 	.word	0x08002058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002058 	.word	0x08002058

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fc5a 	bl	8001e00 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000674:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000678:	2b02      	cmp	r3, #2
 800067a:	d003      	beq.n	8000684 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000680:	2001      	movs	r0, #1
 8000682:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000684:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000686:	2305      	movs	r3, #5
 8000688:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000694:	2000      	movs	r0, #0
}
 8000696:	4770      	bx	lr

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a4:	4a68      	ldr	r2, [pc, #416]	; (8000848 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000854 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ae:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	f040 80b0 	bne.w	800081c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006bc:	684c      	ldr	r4, [r1, #4]
 80006be:	f024 0c10 	bic.w	ip, r4, #16
 80006c2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006c6:	2e01      	cmp	r6, #1
 80006c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006cc:	d812      	bhi.n	80006f4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d0:	2603      	movs	r6, #3
 80006d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68ce      	ldr	r6, [r1, #12]
 80006dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006e2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ea:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	409e      	lsls	r6, r3
 80006f0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006f2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006f6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fc:	43f6      	mvns	r6, r6
 80006fe:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	688f      	ldr	r7, [r1, #8]
 8000704:	fa07 f70e 	lsl.w	r7, r7, lr
 8000708:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	d116      	bne.n	8000742 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000714:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000718:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000720:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000728:	f04f 0c0f 	mov.w	ip, #15
 800072c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000730:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000734:	690f      	ldr	r7, [r1, #16]
 8000736:	fa07 f70b 	lsl.w	r7, r7, fp
 800073a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800073e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000742:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	f004 0703 	and.w	r7, r4, #3
 800074a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800074e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000752:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000754:	00e6      	lsls	r6, r4, #3
 8000756:	d561      	bpl.n	800081c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f04f 0b00 	mov.w	fp, #0
 800075c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000760:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000764:	4e39      	ldr	r6, [pc, #228]	; (800084c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800076a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000772:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000776:	9703      	str	r7, [sp, #12]
 8000778:	9f03      	ldr	r7, [sp, #12]
 800077a:	f023 0703 	bic.w	r7, r3, #3
 800077e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000782:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000786:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800078a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	d043      	beq.n	800082a <HAL_GPIO_Init+0x192>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d041      	beq.n	800082e <HAL_GPIO_Init+0x196>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d03f      	beq.n	8000832 <HAL_GPIO_Init+0x19a>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d03d      	beq.n	8000836 <HAL_GPIO_Init+0x19e>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d03b      	beq.n	800083a <HAL_GPIO_Init+0x1a2>
 80007c2:	4548      	cmp	r0, r9
 80007c4:	d03b      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007c6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d039      	beq.n	8000842 <HAL_GPIO_Init+0x1aa>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	bf14      	ite	ne
 80007d6:	2608      	movne	r6, #8
 80007d8:	2607      	moveq	r6, #7
 80007da:	fa06 f60c 	lsl.w	r6, r6, ip
 80007de:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007e4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007f2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007f4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007fe:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000800:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000802:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000804:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf0c      	ite	eq
 800080a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800080e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000810:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000812:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000814:	bf54      	ite	pl
 8000816:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000818:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800081a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081c:	3301      	adds	r3, #1
 800081e:	2b10      	cmp	r3, #16
 8000820:	f47f af45 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000824:	b005      	add	sp, #20
 8000826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082a:	465e      	mov	r6, fp
 800082c:	e7d5      	b.n	80007da <HAL_GPIO_Init+0x142>
 800082e:	2601      	movs	r6, #1
 8000830:	e7d3      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000832:	2602      	movs	r6, #2
 8000834:	e7d1      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000836:	2603      	movs	r6, #3
 8000838:	e7cf      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083a:	2604      	movs	r6, #4
 800083c:	e7cd      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083e:	2605      	movs	r6, #5
 8000840:	e7cb      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000842:	2606      	movs	r6, #6
 8000844:	e7c9      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000846:	bf00      	nop
 8000848:	40013c00 	.word	0x40013c00
 800084c:	40020000 	.word	0x40020000
 8000850:	40023800 	.word	0x40023800
 8000854:	40021400 	.word	0x40021400

08000858 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000858:	b10a      	cbz	r2, 800085e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085a:	6181      	str	r1, [r0, #24]
 800085c:	4770      	bx	lr
 800085e:	0409      	lsls	r1, r1, #16
 8000860:	e7fb      	b.n	800085a <HAL_GPIO_WritePin+0x2>

08000862 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000862:	4770      	bx	lr

08000864 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000864:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000868:	6959      	ldr	r1, [r3, #20]
 800086a:	4201      	tst	r1, r0
 800086c:	d002      	beq.n	8000874 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800086e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000870:	f7ff fff7 	bl	8000862 <HAL_GPIO_EXTI_Callback>
 8000874:	bd08      	pop	{r3, pc}
 8000876:	bf00      	nop
 8000878:	40013c00 	.word	0x40013c00

0800087c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800087e:	4604      	mov	r4, r0
 8000880:	2800      	cmp	r0, #0
 8000882:	d041      	beq.n	8000908 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000884:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000888:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800088c:	b92b      	cbnz	r3, 800089a <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8000890:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000894:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000896:	f001 fad3 	bl	8001e40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800089a:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800089c:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800089e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80008a2:	69d3      	ldr	r3, [r2, #28]
 80008a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80008a8:	f023 030f 	bic.w	r3, r3, #15
 80008ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80008ae:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80008b0:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d031      	beq.n	800091a <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80008b6:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80008b8:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80008ba:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80008bc:	bf0c      	ite	eq
 80008be:	2510      	moveq	r5, #16
 80008c0:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80008c2:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80008c4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80008c6:	bf98      	it	ls
 80008c8:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80008ca:	f000 fd19 	bl	8001300 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80008ce:	6923      	ldr	r3, [r4, #16]
 80008d0:	6961      	ldr	r1, [r4, #20]
 80008d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d6:	d11b      	bne.n	8000910 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80008d8:	68e3      	ldr	r3, [r4, #12]
 80008da:	220a      	movs	r2, #10
 80008dc:	b1b3      	cbz	r3, 800090c <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80008de:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80008e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e4:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80008e6:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80008e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ec:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80008ee:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80008f2:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80008f6:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80008f8:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80008fa:	1e99      	subs	r1, r3, #2
 80008fc:	29fd      	cmp	r1, #253	; 0xfd
 80008fe:	d90e      	bls.n	800091e <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000908:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800090c:	00eb      	lsls	r3, r5, #3
 800090e:	e7e7      	b.n	80008e0 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000910:	230a      	movs	r3, #10
 8000912:	fbb0 f0f5 	udiv	r0, r0, r5
 8000916:	4343      	muls	r3, r0
 8000918:	e7e5      	b.n	80008e6 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 800091a:	2200      	movs	r2, #0
 800091c:	e7ed      	b.n	80008fa <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800091e:	4313      	orrs	r3, r2
 8000920:	6922      	ldr	r2, [r4, #16]
 8000922:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000924:	6866      	ldr	r6, [r4, #4]
 8000926:	68e5      	ldr	r5, [r4, #12]
 8000928:	69a0      	ldr	r0, [r4, #24]
 800092a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80009a8 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800092e:	4313      	orrs	r3, r2
 8000930:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000932:	68a3      	ldr	r3, [r4, #8]
 8000934:	69cf      	ldr	r7, [r1, #28]
 8000936:	ea46 0203 	orr.w	r2, r6, r3
 800093a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800093e:	432a      	orrs	r2, r5
 8000940:	4302      	orrs	r2, r0
 8000942:	ea07 070e 	and.w	r7, r7, lr
 8000946:	433a      	orrs	r2, r7
 8000948:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800094a:	6a22      	ldr	r2, [r4, #32]
 800094c:	2a01      	cmp	r2, #1
 800094e:	d11d      	bne.n	800098c <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_I2S_Init+0x120>)
 8000952:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000954:	4f12      	ldr	r7, [pc, #72]	; (80009a0 <HAL_I2S_Init+0x124>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_I2S_Init+0x128>)
 8000958:	42b9      	cmp	r1, r7
 800095a:	bf18      	it	ne
 800095c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000960:	432b      	orrs	r3, r5
 8000962:	69d1      	ldr	r1, [r2, #28]
 8000964:	ea01 010e 	and.w	r1, r1, lr
 8000968:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800096a:	2102      	movs	r1, #2
 800096c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800096e:	69d7      	ldr	r7, [r2, #28]
 8000970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000974:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8000976:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800097a:	ea43 0307 	orr.w	r3, r3, r7
 800097e:	bf0c      	ite	eq
 8000980:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8000984:	2100      	movne	r1, #0
 8000986:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8000988:	430b      	orrs	r3, r1
 800098a:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800098c:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800098e:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000990:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8000992:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8000996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000998:	080009b7 	.word	0x080009b7
 800099c:	08000ab5 	.word	0x08000ab5
 80009a0:	40003800 	.word	0x40003800
 80009a4:	40003400 	.word	0x40003400
 80009a8:	fffff040 	.word	0xfffff040

080009ac <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80009ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80009ae:	4718      	bx	r3

080009b0 <HAL_I2S_TxCpltCallback>:
 80009b0:	4770      	bx	lr

080009b2 <HAL_I2S_RxCpltCallback>:
 80009b2:	4770      	bx	lr

080009b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009b4:	4770      	bx	lr

080009b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80009b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80009b8:	6803      	ldr	r3, [r0, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80009be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80009c2:	2a04      	cmp	r2, #4
{
 80009c4:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80009c6:	d136      	bne.n	8000a36 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80009c8:	9a01      	ldr	r2, [sp, #4]
 80009ca:	07d1      	lsls	r1, r2, #31
 80009cc:	d517      	bpl.n	80009fe <I2S_IRQHandler+0x48>
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	0652      	lsls	r2, r2, #25
 80009d2:	d514      	bpl.n	80009fe <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80009d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009d6:	68d9      	ldr	r1, [r3, #12]
 80009d8:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80009dc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80009de:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80009e0:	3a01      	subs	r2, #1
 80009e2:	b292      	uxth	r2, r2
 80009e4:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80009e6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80009e8:	b292      	uxth	r2, r2
 80009ea:	b942      	cbnz	r2, 80009fe <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80009f2:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80009fa:	f7ff ffda 	bl	80009b2 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80009fe:	9b01      	ldr	r3, [sp, #4]
 8000a00:	0659      	lsls	r1, r3, #25
 8000a02:	d518      	bpl.n	8000a36 <I2S_IRQHandler+0x80>
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	0692      	lsls	r2, r2, #26
 8000a0a:	d514      	bpl.n	8000a36 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000a12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000a14:	2200      	movs	r2, #0
 8000a16:	9202      	str	r2, [sp, #8]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	9202      	str	r2, [sp, #8]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8000a30:	4620      	mov	r0, r4
 8000a32:	f7ff ffbf 	bl	80009b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8000a36:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d136      	bne.n	8000aac <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d519      	bpl.n	8000a78 <I2S_IRQHandler+0xc2>
 8000a44:	6822      	ldr	r2, [r4, #0]
 8000a46:	6853      	ldr	r3, [r2, #4]
 8000a48:	0618      	lsls	r0, r3, #24
 8000a4a:	d515      	bpl.n	8000a78 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8000a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a4e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000a52:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8000a54:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8000a56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8000a5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b94b      	cbnz	r3, 8000a78 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000a64:	6853      	ldr	r3, [r2, #4]
 8000a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000a6a:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8000a72:	4620      	mov	r0, r4
 8000a74:	f7ff ff9c 	bl	80009b0 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000a78:	9b01      	ldr	r3, [sp, #4]
 8000a7a:	0719      	lsls	r1, r3, #28
 8000a7c:	d516      	bpl.n	8000aac <I2S_IRQHandler+0xf6>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	0692      	lsls	r2, r2, #26
 8000a84:	d512      	bpl.n	8000aac <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000a8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	9203      	str	r2, [sp, #12]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	9303      	str	r3, [sp, #12]
 8000a96:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff ff84 	bl	80009b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8000aac:	b004      	add	sp, #16
 8000aae:	bd10      	pop	{r4, pc}

08000ab0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8000ab4:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8000ab6:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8000ab8:	498b      	ldr	r1, [pc, #556]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8000aba:	6893      	ldr	r3, [r2, #8]
{
 8000abc:	b086      	sub	sp, #24
 8000abe:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8000ac0:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8000ac2:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	bf18      	it	ne
 8000ac8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000acc:	6899      	ldr	r1, [r3, #8]
 8000ace:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8000ad0:	6851      	ldr	r1, [r2, #4]
 8000ad2:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8000ad4:	6859      	ldr	r1, [r3, #4]
 8000ad6:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8000ad8:	6841      	ldr	r1, [r0, #4]
 8000ada:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8000ade:	f040 8090 	bne.w	8000c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8000ae2:	9b00      	ldr	r3, [sp, #0]
 8000ae4:	0799      	lsls	r1, r3, #30
 8000ae6:	d51a      	bpl.n	8000b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8000ae8:	9b02      	ldr	r3, [sp, #8]
 8000aea:	061b      	lsls	r3, r3, #24
 8000aec:	d517      	bpl.n	8000b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000aee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000af0:	1c99      	adds	r1, r3, #2
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	6241      	str	r1, [r0, #36]	; 0x24
 8000af6:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8000af8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8000b00:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b95b      	cbnz	r3, 8000b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000b06:	6853      	ldr	r3, [r2, #4]
 8000b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000b0c:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8000b0e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b923      	cbnz	r3, 8000b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000b1a:	f7ff ffc9 	bl	8000ab0 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8000b1e:	9b01      	ldr	r3, [sp, #4]
 8000b20:	07d8      	lsls	r0, r3, #31
 8000b22:	d522      	bpl.n	8000b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8000b24:	9b03      	ldr	r3, [sp, #12]
 8000b26:	0659      	lsls	r1, r3, #25
 8000b28:	d51f      	bpl.n	8000b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8000b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	496e      	ldr	r1, [pc, #440]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8000b30:	1c93      	adds	r3, r2, #2
 8000b32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b34:	4b6d      	ldr	r3, [pc, #436]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000b36:	4288      	cmp	r0, r1
 8000b38:	bf18      	it	ne
 8000b3a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8000b42:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000b44:	3a01      	subs	r2, #1
 8000b46:	b292      	uxth	r2, r2
 8000b48:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8000b4a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	b962      	cbnz	r2, 8000b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000b56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8000b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b92b      	cbnz	r3, 8000b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000b64:	4620      	mov	r0, r4
 8000b66:	f7ff ffa3 	bl	8000ab0 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8000b6a:	9b01      	ldr	r3, [sp, #4]
 8000b6c:	065a      	lsls	r2, r3, #25
 8000b6e:	d522      	bpl.n	8000bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8000b70:	9b03      	ldr	r3, [sp, #12]
 8000b72:	069b      	lsls	r3, r3, #26
 8000b74:	d51f      	bpl.n	8000bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	495b      	ldr	r1, [pc, #364]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8000b7a:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	bf18      	it	ne
 8000b80:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8000b84:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b86:	6851      	ldr	r1, [r2, #4]
 8000b88:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000b8c:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000b94:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000b96:	2200      	movs	r2, #0
 8000b98:	9204      	str	r2, [sp, #16]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	9204      	str	r2, [sp, #16]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000bb2:	f7ff feff 	bl	80009b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	0718      	lsls	r0, r3, #28
 8000bba:	d520      	bpl.n	8000bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8000bbc:	9b02      	ldr	r3, [sp, #8]
 8000bbe:	0699      	lsls	r1, r3, #26
 8000bc0:	d51d      	bpl.n	8000bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000bc2:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000bc4:	4948      	ldr	r1, [pc, #288]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000bcc:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000bce:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	bf18      	it	ne
 8000bd4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000bd8:	6851      	ldr	r1, [r2, #4]
 8000bda:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000bde:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000be0:	2200      	movs	r2, #0
 8000be2:	9205      	str	r2, [sp, #20]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fedb 	bl	80009b4 <HAL_I2S_ErrorCallback>
}
 8000bfe:	b006      	add	sp, #24
 8000c00:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8000c02:	9a01      	ldr	r2, [sp, #4]
 8000c04:	0792      	lsls	r2, r2, #30
 8000c06:	d51a      	bpl.n	8000c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8000c08:	9a03      	ldr	r2, [sp, #12]
 8000c0a:	0611      	lsls	r1, r2, #24
 8000c0c:	d517      	bpl.n	8000c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8000c0e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000c10:	1c91      	adds	r1, r2, #2
 8000c12:	8812      	ldrh	r2, [r2, #0]
 8000c14:	6241      	str	r1, [r0, #36]	; 0x24
 8000c16:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8000c18:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000c1a:	3a01      	subs	r2, #1
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8000c20:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000c22:	b292      	uxth	r2, r2
 8000c24:	b95a      	cbnz	r2, 8000c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000c2c:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8000c2e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b923      	cbnz	r3, 8000c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000c3a:	f7ff ff39 	bl	8000ab0 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8000c3e:	9b00      	ldr	r3, [sp, #0]
 8000c40:	07da      	lsls	r2, r3, #31
 8000c42:	d51c      	bpl.n	8000c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8000c44:	9b02      	ldr	r3, [sp, #8]
 8000c46:	065b      	lsls	r3, r3, #25
 8000c48:	d519      	bpl.n	8000c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c4c:	1c9a      	adds	r2, r3, #2
 8000c4e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000c50:	6822      	ldr	r2, [r4, #0]
 8000c52:	68d1      	ldr	r1, [r2, #12]
 8000c54:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8000c56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8000c5e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b963      	cbnz	r3, 8000c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000c64:	6853      	ldr	r3, [r2, #4]
 8000c66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000c6a:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8000c6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b92b      	cbnz	r3, 8000c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f7ff ff19 	bl	8000ab0 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	0658      	lsls	r0, r3, #25
 8000c82:	d51b      	bpl.n	8000cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8000c84:	9b02      	ldr	r3, [sp, #8]
 8000c86:	0699      	lsls	r1, r3, #26
 8000c88:	d518      	bpl.n	8000cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000c8a:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000c8e:	6853      	ldr	r3, [r2, #4]
 8000c90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000c94:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	bf18      	it	ne
 8000c9c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8000ca0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000ca8:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000caa:	2301      	movs	r3, #1
 8000cac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000cb8:	f7ff fe7c 	bl	80009b4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8000cbc:	9b01      	ldr	r3, [sp, #4]
 8000cbe:	071a      	lsls	r2, r3, #28
 8000cc0:	d59d      	bpl.n	8000bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8000cc2:	9b03      	ldr	r3, [sp, #12]
 8000cc4:	069b      	lsls	r3, r3, #26
 8000cc6:	d59a      	bpl.n	8000bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000cc8:	6822      	ldr	r2, [r4, #0]
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8000cce:	428a      	cmp	r2, r1
 8000cd0:	bf18      	it	ne
 8000cd2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000cd6:	6859      	ldr	r1, [r3, #4]
 8000cd8:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8000cdc:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000cde:	6853      	ldr	r3, [r2, #4]
 8000ce0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000ce4:	6053      	str	r3, [r2, #4]
 8000ce6:	e780      	b.n	8000bea <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8000ce8:	40003800 	.word	0x40003800
 8000cec:	40003400 	.word	0x40003400

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	b908      	cbnz	r0, 8000cfc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e03f      	b.n	8000d7c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfc:	6803      	ldr	r3, [r0, #0]
 8000cfe:	07dd      	lsls	r5, r3, #31
 8000d00:	d410      	bmi.n	8000d24 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	0798      	lsls	r0, r3, #30
 8000d06:	d45a      	bmi.n	8000dbe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	071a      	lsls	r2, r3, #28
 8000d0c:	f100 809c 	bmi.w	8000e48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	075b      	lsls	r3, r3, #29
 8000d14:	f100 80ba 	bmi.w	8000e8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d18:	69a0      	ldr	r0, [r4, #24]
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	f040 811b 	bne.w	8000f56 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d20:	2000      	movs	r0, #0
 8000d22:	e02b      	b.n	8000d7c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d24:	4ba4      	ldr	r3, [pc, #656]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	f002 020c 	and.w	r2, r2, #12
 8000d2c:	2a04      	cmp	r2, #4
 8000d2e:	d007      	beq.n	8000d40 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d36:	2a08      	cmp	r2, #8
 8000d38:	d10a      	bne.n	8000d50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	0259      	lsls	r1, r3, #9
 8000d3e:	d507      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	4b9d      	ldr	r3, [pc, #628]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	039a      	lsls	r2, r3, #14
 8000d46:	d5dc      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x12>
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1d9      	bne.n	8000d02 <HAL_RCC_OscConfig+0x12>
 8000d4e:	e7d3      	b.n	8000cf8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	6863      	ldr	r3, [r4, #4]
 8000d52:	4d99      	ldr	r5, [pc, #612]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d58:	d113      	bne.n	8000d82 <HAL_RCC_OscConfig+0x92>
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc03 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4d94      	ldr	r5, [pc, #592]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000d68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	039b      	lsls	r3, r3, #14
 8000d6e:	d4c8      	bmi.n	8000d02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fbfc 	bl	800056c <HAL_GetTick>
 8000d74:	1b80      	subs	r0, r0, r6
 8000d76:	2864      	cmp	r0, #100	; 0x64
 8000d78:	d9f7      	bls.n	8000d6a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000d7a:	2003      	movs	r0, #3
}
 8000d7c:	b002      	add	sp, #8
 8000d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d86:	d104      	bne.n	8000d92 <HAL_RCC_OscConfig+0xa2>
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	e7e3      	b.n	8000d5a <HAL_RCC_OscConfig+0x6a>
 8000d92:	682a      	ldr	r2, [r5, #0]
 8000d94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d98:	602a      	str	r2, [r5, #0]
 8000d9a:	682a      	ldr	r2, [r5, #0]
 8000d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000da0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1dd      	bne.n	8000d62 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000da6:	f7ff fbe1 	bl	800056c <HAL_GetTick>
 8000daa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	039f      	lsls	r7, r3, #14
 8000db0:	d5a7      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db2:	f7ff fbdb 	bl	800056c <HAL_GetTick>
 8000db6:	1b80      	subs	r0, r0, r6
 8000db8:	2864      	cmp	r0, #100	; 0x64
 8000dba:	d9f7      	bls.n	8000dac <HAL_RCC_OscConfig+0xbc>
 8000dbc:	e7dd      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dbe:	4b7e      	ldr	r3, [pc, #504]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	f012 0f0c 	tst.w	r2, #12
 8000dc6:	d007      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dce:	2a08      	cmp	r2, #8
 8000dd0:	d111      	bne.n	8000df6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	025e      	lsls	r6, r3, #9
 8000dd6:	d40e      	bmi.n	8000df6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	0795      	lsls	r5, r2, #30
 8000dde:	d502      	bpl.n	8000de6 <HAL_RCC_OscConfig+0xf6>
 8000de0:	68e2      	ldr	r2, [r4, #12]
 8000de2:	2a01      	cmp	r2, #1
 8000de4:	d188      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	6921      	ldr	r1, [r4, #16]
 8000dea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000df2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df4:	e788      	b.n	8000d08 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000df6:	68e2      	ldr	r2, [r4, #12]
 8000df8:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <HAL_RCC_OscConfig+0x2cc>)
 8000dfa:	b1b2      	cbz	r2, 8000e2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e00:	f7ff fbb4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	4d6c      	ldr	r5, [pc, #432]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	0798      	lsls	r0, r3, #30
 8000e0c:	d507      	bpl.n	8000e1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	6922      	ldr	r2, [r4, #16]
 8000e12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e1a:	602b      	str	r3, [r5, #0]
 8000e1c:	e774      	b.n	8000d08 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fba5 	bl	800056c <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	2802      	cmp	r0, #2
 8000e26:	d9ef      	bls.n	8000e08 <HAL_RCC_OscConfig+0x118>
 8000e28:	e7a7      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fb9e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e30:	4d61      	ldr	r5, [pc, #388]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	0799      	lsls	r1, r3, #30
 8000e38:	f57f af66 	bpl.w	8000d08 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fb96 	bl	800056c <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9f6      	bls.n	8000e34 <HAL_RCC_OscConfig+0x144>
 8000e46:	e798      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e48:	6962      	ldr	r2, [r4, #20]
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_RCC_OscConfig+0x2d0>)
 8000e4c:	b17a      	cbz	r2, 8000e6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e52:	f7ff fb8b 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e56:	4d58      	ldr	r5, [pc, #352]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000e58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e5c:	079f      	lsls	r7, r3, #30
 8000e5e:	f53f af57 	bmi.w	8000d10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e62:	f7ff fb83 	bl	800056c <HAL_GetTick>
 8000e66:	1b80      	subs	r0, r0, r6
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9f6      	bls.n	8000e5a <HAL_RCC_OscConfig+0x16a>
 8000e6c:	e785      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000e6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e70:	f7ff fb7c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	4d50      	ldr	r5, [pc, #320]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000e76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e7a:	0798      	lsls	r0, r3, #30
 8000e7c:	f57f af48 	bpl.w	8000d10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e80:	f7ff fb74 	bl	800056c <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9f6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x188>
 8000e8a:	e776      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e94:	d128      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eaa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4d45      	ldr	r5, [pc, #276]	; (8000fc4 <HAL_RCC_OscConfig+0x2d4>)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	05d9      	lsls	r1, r3, #23
 8000eb2:	d51b      	bpl.n	8000eec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	68a3      	ldr	r3, [r4, #8]
 8000eb6:	4d40      	ldr	r5, [pc, #256]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d127      	bne.n	8000f0c <HAL_RCC_OscConfig+0x21c>
 8000ebc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fb52 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	4d3b      	ldr	r5, [pc, #236]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000eca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ed2:	079b      	lsls	r3, r3, #30
 8000ed4:	d539      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f43f af1e 	beq.w	8000d18 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000ede:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	e717      	b.n	8000d18 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000ee8:	2600      	movs	r6, #0
 8000eea:	e7df      	b.n	8000eac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fb3a 	bl	800056c <HAL_GetTick>
 8000ef8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	05da      	lsls	r2, r3, #23
 8000efe:	d4d9      	bmi.n	8000eb4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f00:	f7ff fb34 	bl	800056c <HAL_GetTick>
 8000f04:	1bc0      	subs	r0, r0, r7
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f7      	bls.n	8000efa <HAL_RCC_OscConfig+0x20a>
 8000f0a:	e736      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d104      	bne.n	8000f1a <HAL_RCC_OscConfig+0x22a>
 8000f10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	672b      	str	r3, [r5, #112]	; 0x70
 8000f18:	e7d0      	b.n	8000ebc <HAL_RCC_OscConfig+0x1cc>
 8000f1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	672a      	str	r2, [r5, #112]	; 0x70
 8000f22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f24:	f022 0204 	bic.w	r2, r2, #4
 8000f28:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1ca      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb1d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f3a:	0798      	lsls	r0, r3, #30
 8000f3c:	d5cb      	bpl.n	8000ed6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fb15 	bl	800056c <HAL_GetTick>
 8000f42:	1bc0      	subs	r0, r0, r7
 8000f44:	4540      	cmp	r0, r8
 8000f46:	d9f7      	bls.n	8000f38 <HAL_RCC_OscConfig+0x248>
 8000f48:	e717      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb0f 	bl	800056c <HAL_GetTick>
 8000f4e:	1bc0      	subs	r0, r0, r7
 8000f50:	4540      	cmp	r0, r8
 8000f52:	d9bd      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x1e0>
 8000f54:	e711      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f56:	4d18      	ldr	r5, [pc, #96]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
 8000f58:	68ab      	ldr	r3, [r5, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d047      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x302>
 8000f62:	4e19      	ldr	r6, [pc, #100]	; (8000fc8 <HAL_RCC_OscConfig+0x2d8>)
 8000f64:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f66:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f68:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f6a:	d135      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fafe 	bl	800056c <HAL_GetTick>
 8000f70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	0199      	lsls	r1, r3, #6
 8000f76:	d429      	bmi.n	8000fcc <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f78:	6a22      	ldr	r2, [r4, #32]
 8000f7a:	69e3      	ldr	r3, [r4, #28]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f8e:	0852      	lsrs	r2, r2, #1
 8000f90:	3a01      	subs	r2, #1
 8000f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f96:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f98:	2301      	movs	r3, #1
 8000f9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fae6 	bl	800056c <HAL_GetTick>
 8000fa0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	019a      	lsls	r2, r3, #6
 8000fa6:	f53f aebb 	bmi.w	8000d20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff fadf 	bl	800056c <HAL_GetTick>
 8000fae:	1b40      	subs	r0, r0, r5
 8000fb0:	2802      	cmp	r0, #2
 8000fb2:	d9f6      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x2b2>
 8000fb4:	e6e1      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	42470000 	.word	0x42470000
 8000fc0:	42470e80 	.word	0x42470e80
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fcc:	f7ff face 	bl	800056c <HAL_GetTick>
 8000fd0:	1bc0      	subs	r0, r0, r7
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d9cd      	bls.n	8000f72 <HAL_RCC_OscConfig+0x282>
 8000fd6:	e6d0      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fac8 	bl	800056c <HAL_GetTick>
 8000fdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	f57f ae9d 	bpl.w	8000d20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fac1 	bl	800056c <HAL_GetTick>
 8000fea:	1b00      	subs	r0, r0, r4
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f6      	bls.n	8000fde <HAL_RCC_OscConfig+0x2ee>
 8000ff0:	e6c3      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff2:	2801      	cmp	r0, #1
 8000ff4:	f43f aec2 	beq.w	8000d7c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ff8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	69e3      	ldr	r3, [r4, #28]
 8000ffc:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001000:	429a      	cmp	r2, r3
 8001002:	f47f ae79 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x8>
 8001006:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001008:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100c:	4293      	cmp	r3, r2
 800100e:	f47f ae73 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001012:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001018:	4003      	ands	r3, r0
 800101a:	4293      	cmp	r3, r2
 800101c:	f47f ae6c 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001020:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001022:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001026:	4293      	cmp	r3, r2
 8001028:	f47f ae66 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800102c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800102e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001032:	1ac0      	subs	r0, r0, r3
 8001034:	bf18      	it	ne
 8001036:	2001      	movne	r0, #1
 8001038:	e6a0      	b.n	8000d7c <HAL_RCC_OscConfig+0x8c>
 800103a:	bf00      	nop

0800103c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800103e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001040:	688b      	ldr	r3, [r1, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b04      	cmp	r3, #4
 8001048:	d003      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0x16>
 800104a:	2b08      	cmp	r3, #8
 800104c:	d003      	beq.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001050:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <HAL_RCC_GetSysClockFreq+0x58>)
 8001054:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001056:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001058:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800105c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001060:	bf14      	ite	ne
 8001062:	480c      	ldrne	r0, [pc, #48]	; (8001094 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001064:	480a      	ldreq	r0, [pc, #40]	; (8001090 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001066:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800106a:	bf18      	it	ne
 800106c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800106e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001072:	fba1 0100 	umull	r0, r1, r1, r0
 8001076:	f7ff f8a7 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_RCC_GetSysClockFreq+0x50>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001082:	3301      	adds	r3, #1
 8001084:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001086:	fbb0 f0f3 	udiv	r0, r0, r3
 800108a:	bd08      	pop	{r3, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	00f42400 	.word	0x00f42400
 8001094:	007a1200 	.word	0x007a1200

08001098 <HAL_RCC_ClockConfig>:
{
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	b910      	cbnz	r0, 80010a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010a2:	2001      	movs	r0, #1
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_RCC_ClockConfig+0x124>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f002 020f 	and.w	r2, r2, #15
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d329      	bcc.n	8001108 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b4:	6821      	ldr	r1, [r4, #0]
 80010b6:	078f      	lsls	r7, r1, #30
 80010b8:	d42e      	bmi.n	8001118 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ba:	07c8      	lsls	r0, r1, #31
 80010bc:	d441      	bmi.n	8001142 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_ClockConfig+0x124>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f002 020f 	and.w	r2, r2, #15
 80010c6:	4295      	cmp	r5, r2
 80010c8:	d367      	bcc.n	800119a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	0751      	lsls	r1, r2, #29
 80010ce:	d46d      	bmi.n	80011ac <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	0713      	lsls	r3, r2, #28
 80010d2:	d507      	bpl.n	80010e4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010d4:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
 80010d6:	6921      	ldr	r1, [r4, #16]
 80010d8:	6893      	ldr	r3, [r2, #8]
 80010da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e4:	f7ff ffaa 	bl	800103c <HAL_RCC_GetSysClockFreq>
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <HAL_RCC_ClockConfig+0x12c>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	40d8      	lsrs	r0, r3
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_RCC_ClockConfig+0x130>)
 80010f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_RCC_ClockConfig+0x134>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f7ff f9eb 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001102:	2000      	movs	r0, #0
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001108:	b2ca      	uxtb	r2, r1
 800110a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	4299      	cmp	r1, r3
 8001114:	d1c5      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xa>
 8001116:	e7cd      	b.n	80010b4 <HAL_RCC_ClockConfig+0x1c>
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800111e:	bf1e      	ittt	ne
 8001120:	689a      	ldrne	r2, [r3, #8]
 8001122:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001126:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001128:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112a:	bf42      	ittt	mi
 800112c:	689a      	ldrmi	r2, [r3, #8]
 800112e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001132:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68a0      	ldr	r0, [r4, #8]
 8001138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800113c:	4302      	orrs	r2, r0
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e7bb      	b.n	80010ba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
 8001146:	2a01      	cmp	r2, #1
 8001148:	d11d      	bne.n	8001186 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	d0a7      	beq.n	80010a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001152:	4e1b      	ldr	r6, [pc, #108]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
 8001154:	68b3      	ldr	r3, [r6, #8]
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	4313      	orrs	r3, r2
 800115c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800115e:	f7ff fa05 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001162:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001166:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001168:	68b3      	ldr	r3, [r6, #8]
 800116a:	6862      	ldr	r2, [r4, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001174:	d0a3      	beq.n	80010be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001176:	f7ff f9f9 	bl	800056c <HAL_GetTick>
 800117a:	1bc0      	subs	r0, r0, r7
 800117c:	4540      	cmp	r0, r8
 800117e:	d9f3      	bls.n	8001168 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001180:	2003      	movs	r0, #3
}
 8001182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	1e91      	subs	r1, r2, #2
 8001188:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118c:	d802      	bhi.n	8001194 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001192:	e7dd      	b.n	8001150 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	f013 0f02 	tst.w	r3, #2
 8001198:	e7da      	b.n	8001150 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	b2ea      	uxtb	r2, r5
 800119c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	429d      	cmp	r5, r3
 80011a6:	f47f af7c 	bne.w	80010a2 <HAL_RCC_ClockConfig+0xa>
 80011aa:	e78e      	b.n	80010ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4904      	ldr	r1, [pc, #16]	; (80011c0 <HAL_RCC_ClockConfig+0x128>)
 80011ae:	68e0      	ldr	r0, [r4, #12]
 80011b0:	688b      	ldr	r3, [r1, #8]
 80011b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011b6:	4303      	orrs	r3, r0
 80011b8:	608b      	str	r3, [r1, #8]
 80011ba:	e789      	b.n	80010d0 <HAL_RCC_ClockConfig+0x38>
 80011bc:	40023c00 	.word	0x40023c00
 80011c0:	40023800 	.word	0x40023800
 80011c4:	08002070 	.word	0x08002070
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011d0:	6803      	ldr	r3, [r0, #0]
 80011d2:	f013 0f05 	tst.w	r3, #5
{
 80011d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011d8:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011da:	d105      	bne.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011dc:	6828      	ldr	r0, [r5, #0]
 80011de:	f010 0002 	ands.w	r0, r0, #2
 80011e2:	d128      	bne.n	8001236 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80011e4:	b003      	add	sp, #12
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80011e8:	4c41      	ldr	r4, [pc, #260]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011ea:	4e42      	ldr	r6, [pc, #264]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80011f0:	f7ff f9bc 	bl	800056c <HAL_GetTick>
 80011f4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011f6:	6833      	ldr	r3, [r6, #0]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	d415      	bmi.n	8001228 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80011fc:	68ab      	ldr	r3, [r5, #8]
 80011fe:	686a      	ldr	r2, [r5, #4]
 8001200:	071b      	lsls	r3, r3, #28
 8001202:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001206:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800120a:	2301      	movs	r3, #1
 800120c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800120e:	f7ff f9ad 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001212:	4c38      	ldr	r4, [pc, #224]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001214:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	0118      	lsls	r0, r3, #4
 800121a:	d4df      	bmi.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800121c:	f7ff f9a6 	bl	800056c <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9f7      	bls.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001226:	e004      	b.n	8001232 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001228:	f7ff f9a0 	bl	800056c <HAL_GetTick>
 800122c:	1bc0      	subs	r0, r0, r7
 800122e:	2802      	cmp	r0, #2
 8001230:	d9e1      	bls.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001232:	2003      	movs	r0, #3
 8001234:	e7d6      	b.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 800123c:	4c2e      	ldr	r4, [pc, #184]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001258:	f7ff f988 	bl	800056c <HAL_GetTick>
 800125c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	05d9      	lsls	r1, r3, #23
 8001262:	d51b      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001264:	4c23      	ldr	r4, [pc, #140]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001266:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001268:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800126c:	d11c      	bne.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800126e:	68eb      	ldr	r3, [r5, #12]
 8001270:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001274:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001278:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800127a:	d134      	bne.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800127c:	6891      	ldr	r1, [r2, #8]
 800127e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001282:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001286:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800128a:	4301      	orrs	r1, r0
 800128c:	6091      	str	r1, [r2, #8]
 800128e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	430b      	orrs	r3, r1
 8001296:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001298:	2000      	movs	r0, #0
 800129a:	e7a3      	b.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800129c:	f7ff f966 	bl	800056c <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9db      	bls.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80012a6:	e7c4      	b.n	8001232 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012a8:	68ea      	ldr	r2, [r5, #12]
 80012aa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d0dd      	beq.n	800126e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012be:	2100      	movs	r1, #0
 80012c0:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80012c2:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80012c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80012c6:	07da      	lsls	r2, r3, #31
 80012c8:	d5d1      	bpl.n	800126e <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80012ca:	f7ff f94f 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80012d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d4c9      	bmi.n	800126e <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff f947 	bl	800056c <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	42b8      	cmp	r0, r7
 80012e2:	d9f7      	bls.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80012e4:	e7a5      	b.n	8001232 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012e6:	6891      	ldr	r1, [r2, #8]
 80012e8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80012ec:	e7ce      	b.n	800128c <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80012ee:	bf00      	nop
 80012f0:	42470068 	.word	0x42470068
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000
 80012fc:	42470e40 	.word	0x42470e40

08001300 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001300:	2801      	cmp	r0, #1
 8001302:	d120      	bne.n	8001346 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001306:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001308:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 800130c:	d004      	beq.n	8001318 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800130e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001312:	bf18      	it	ne
 8001314:	2000      	movne	r0, #0
 8001316:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001318:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800131a:	490c      	ldr	r1, [pc, #48]	; (800134c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800131c:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800131e:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001320:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001324:	bf4c      	ite	mi
 8001326:	4b0b      	ldrmi	r3, [pc, #44]	; (8001354 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001328:	4b0b      	ldrpl	r3, [pc, #44]	; (8001358 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800132a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800132e:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001332:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001336:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800133a:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800133c:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001340:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001344:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001346:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	00bb8000 	.word	0x00bb8000
 8001354:	007a1200 	.word	0x007a1200
 8001358:	00f42400 	.word	0x00f42400

0800135c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	4604      	mov	r4, r0
 8001360:	460e      	mov	r6, r1
 8001362:	4615      	mov	r5, r2
 8001364:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001366:	6821      	ldr	r1, [r4, #0]
 8001368:	688a      	ldr	r2, [r1, #8]
 800136a:	ea36 0302 	bics.w	r3, r6, r2
 800136e:	d001      	beq.n	8001374 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001374:	1c6b      	adds	r3, r5, #1
 8001376:	d0f7      	beq.n	8001368 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001378:	f7ff f8f8 	bl	800056c <HAL_GetTick>
 800137c:	1bc0      	subs	r0, r0, r7
 800137e:	4285      	cmp	r5, r0
 8001380:	d8f1      	bhi.n	8001366 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800138a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800138c:	6862      	ldr	r2, [r4, #4]
 800138e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001392:	d10a      	bne.n	80013aa <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001394:	68a2      	ldr	r2, [r4, #8]
 8001396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800139a:	d002      	beq.n	80013a2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800139c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80013a0:	d103      	bne.n	80013aa <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013a8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80013b0:	d107      	bne.n	80013c2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013c0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80013c8:	2300      	movs	r3, #0
 80013ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80013ce:	2003      	movs	r0, #3
 80013d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80013d2:	b538      	push	{r3, r4, r5, lr}
 80013d4:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013d6:	6842      	ldr	r2, [r0, #4]
 80013d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80013dc:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013de:	d11f      	bne.n	8001420 <SPI_EndRxTransaction+0x4e>
 80013e0:	6882      	ldr	r2, [r0, #8]
 80013e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013e6:	d002      	beq.n	80013ee <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80013ec:	d107      	bne.n	80013fe <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80013ee:	6825      	ldr	r5, [r4, #0]
 80013f0:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80013f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80013f6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80013fa:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80013fc:	d007      	beq.n	800140e <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013fe:	460a      	mov	r2, r1
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff ffaa 	bl	800135c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001408:	b920      	cbnz	r0, 8001414 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
 800140c:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800140e:	460a      	mov	r2, r1
 8001410:	2101      	movs	r1, #1
 8001412:	e7f6      	b.n	8001402 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001414:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001416:	f043 0320 	orr.w	r3, r3, #32
 800141a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800141c:	2003      	movs	r0, #3
 800141e:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001420:	460a      	mov	r2, r1
 8001422:	2101      	movs	r1, #1
 8001424:	e7ee      	b.n	8001404 <SPI_EndRxTransaction+0x32>
	...

08001428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800142a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <SPI_EndRxTxTransaction+0x54>)
 800142e:	4e14      	ldr	r6, [pc, #80]	; (8001480 <SPI_EndRxTxTransaction+0x58>)
 8001430:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001432:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001434:	fbb5 f6f6 	udiv	r6, r5, r6
 8001438:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800143c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800143e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001442:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001444:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001446:	d10d      	bne.n	8001464 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001448:	460a      	mov	r2, r1
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	f7ff ff86 	bl	800135c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001450:	b910      	cbnz	r0, 8001458 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001452:	2000      	movs	r0, #0
}
 8001454:	b002      	add	sp, #8
 8001456:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001458:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e7f7      	b.n	8001454 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f3      	beq.n	8001452 <SPI_EndRxTxTransaction+0x2a>
      count--;
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	3b01      	subs	r3, #1
 800146e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	d4f5      	bmi.n	8001464 <SPI_EndRxTxTransaction+0x3c>
 8001478:	e7eb      	b.n	8001452 <SPI_EndRxTxTransaction+0x2a>
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	016e3600 	.word	0x016e3600

08001484 <HAL_SPI_Init>:
{
 8001484:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001486:	4604      	mov	r4, r0
 8001488:	2800      	cmp	r0, #0
 800148a:	d036      	beq.n	80014fa <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001490:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001494:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001498:	b91b      	cbnz	r3, 80014a2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800149a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800149e:	f000 fd21 	bl	8001ee4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80014a2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014a4:	68a0      	ldr	r0, [r4, #8]
 80014a6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80014ae:	680b      	ldr	r3, [r1, #0]
 80014b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014b4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014b6:	6863      	ldr	r3, [r4, #4]
 80014b8:	4303      	orrs	r3, r0
 80014ba:	68e0      	ldr	r0, [r4, #12]
 80014bc:	4303      	orrs	r3, r0
 80014be:	6920      	ldr	r0, [r4, #16]
 80014c0:	4303      	orrs	r3, r0
 80014c2:	6960      	ldr	r0, [r4, #20]
 80014c4:	4303      	orrs	r3, r0
 80014c6:	69e0      	ldr	r0, [r4, #28]
 80014c8:	4303      	orrs	r3, r0
 80014ca:	6a20      	ldr	r0, [r4, #32]
 80014cc:	4303      	orrs	r3, r0
 80014ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014d0:	4303      	orrs	r3, r0
 80014d2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80014d6:	4303      	orrs	r3, r0
 80014d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80014da:	0c12      	lsrs	r2, r2, #16
 80014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014de:	f002 0204 	and.w	r2, r2, #4
 80014e2:	431a      	orrs	r2, r3
 80014e4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014e6:	69cb      	ldr	r3, [r1, #28]
 80014e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ec:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014ee:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80014f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014f2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80014f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80014f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
}
 80014fc:	bd10      	pop	{r4, pc}

080014fe <HAL_SPI_Transmit>:
{
 80014fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001502:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001504:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001508:	2b01      	cmp	r3, #1
{
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001510:	f000 809b 	beq.w	800164a <HAL_SPI_Transmit+0x14c>
 8001514:	2301      	movs	r3, #1
 8001516:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800151a:	f7ff f827 	bl	800056c <HAL_GetTick>
 800151e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001520:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001524:	b2c0      	uxtb	r0, r0
 8001526:	2801      	cmp	r0, #1
 8001528:	f040 808d 	bne.w	8001646 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 800152c:	2d00      	cmp	r5, #0
 800152e:	d05d      	beq.n	80015ec <HAL_SPI_Transmit+0xee>
 8001530:	f1b8 0f00 	cmp.w	r8, #0
 8001534:	d05a      	beq.n	80015ec <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001536:	2303      	movs	r3, #3
 8001538:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800153c:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800153e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001540:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001542:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001544:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001548:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800154a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800154c:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800154e:	6420      	str	r0, [r4, #64]	; 0x40
 8001550:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001552:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001558:	bf08      	it	eq
 800155a:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800155c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001560:	bf04      	itt	eq
 8001562:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001566:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800156c:	bf5e      	ittt	pl
 800156e:	6803      	ldrpl	r3, [r0, #0]
 8001570:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001574:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001576:	68e3      	ldr	r3, [r4, #12]
 8001578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800157c:	6863      	ldr	r3, [r4, #4]
 800157e:	d13e      	bne.n	80015fe <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001580:	b113      	cbz	r3, 8001588 <HAL_SPI_Transmit+0x8a>
 8001582:	f1b8 0f01 	cmp.w	r8, #1
 8001586:	d107      	bne.n	8001598 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001588:	f835 3b02 	ldrh.w	r3, [r5], #2
 800158c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800158e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001590:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001592:	3b01      	subs	r3, #1
 8001594:	b29b      	uxth	r3, r3
 8001596:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001598:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800159a:	b29b      	uxth	r3, r3
 800159c:	b9a3      	cbnz	r3, 80015c8 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800159e:	463a      	mov	r2, r7
 80015a0:	4631      	mov	r1, r6
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff ff40 	bl	8001428 <SPI_EndRxTxTransaction>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d149      	bne.n	8001640 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015ac:	68a3      	ldr	r3, [r4, #8]
 80015ae:	b933      	cbnz	r3, 80015be <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	9201      	str	r2, [sp, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015be:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80015c0:	3000      	adds	r0, #0
 80015c2:	bf18      	it	ne
 80015c4:	2001      	movne	r0, #1
 80015c6:	e011      	b.n	80015ec <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	6893      	ldr	r3, [r2, #8]
 80015cc:	0798      	lsls	r0, r3, #30
 80015ce:	d505      	bpl.n	80015dc <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80015d6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015d8:	6323      	str	r3, [r4, #48]	; 0x30
 80015da:	e7d9      	b.n	8001590 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015dc:	f7fe ffc6 	bl	800056c <HAL_GetTick>
 80015e0:	1bc0      	subs	r0, r0, r7
 80015e2:	42b0      	cmp	r0, r6
 80015e4:	d3d8      	bcc.n	8001598 <HAL_SPI_Transmit+0x9a>
 80015e6:	1c71      	adds	r1, r6, #1
 80015e8:	d0d6      	beq.n	8001598 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80015ea:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015f2:	2300      	movs	r3, #0
 80015f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80015f8:	b002      	add	sp, #8
 80015fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015fe:	b113      	cbz	r3, 8001606 <HAL_SPI_Transmit+0x108>
 8001600:	f1b8 0f01 	cmp.w	r8, #1
 8001604:	d108      	bne.n	8001618 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001606:	782b      	ldrb	r3, [r5, #0]
 8001608:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800160a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800160c:	3301      	adds	r3, #1
 800160e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001610:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001612:	3b01      	subs	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001618:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0be      	beq.n	800159e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	0792      	lsls	r2, r2, #30
 8001626:	d503      	bpl.n	8001630 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001628:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	731a      	strb	r2, [r3, #12]
 800162e:	e7ec      	b.n	800160a <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001630:	f7fe ff9c 	bl	800056c <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	4286      	cmp	r6, r0
 8001638:	d8ee      	bhi.n	8001618 <HAL_SPI_Transmit+0x11a>
 800163a:	1c73      	adds	r3, r6, #1
 800163c:	d0ec      	beq.n	8001618 <HAL_SPI_Transmit+0x11a>
 800163e:	e7d4      	b.n	80015ea <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001640:	2320      	movs	r3, #32
 8001642:	6563      	str	r3, [r4, #84]	; 0x54
 8001644:	e7b2      	b.n	80015ac <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8001646:	2002      	movs	r0, #2
 8001648:	e7d0      	b.n	80015ec <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800164a:	2002      	movs	r0, #2
 800164c:	e7d4      	b.n	80015f8 <HAL_SPI_Transmit+0xfa>

0800164e <HAL_SPI_TransmitReceive>:
{
 800164e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001652:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001654:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001658:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800165a:	2b01      	cmp	r3, #1
{
 800165c:	4604      	mov	r4, r0
 800165e:	460d      	mov	r5, r1
 8001660:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001662:	f000 80e2 	beq.w	800182a <HAL_SPI_TransmitReceive+0x1dc>
 8001666:	2301      	movs	r3, #1
 8001668:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800166c:	f7fe ff7e 	bl	800056c <HAL_GetTick>
  tmp_state           = hspi->State;
 8001670:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001674:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001676:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001678:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800167a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800167c:	d00a      	beq.n	8001694 <HAL_SPI_TransmitReceive+0x46>
 800167e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001682:	f040 80d0 	bne.w	8001826 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001686:	68a0      	ldr	r0, [r4, #8]
 8001688:	2800      	cmp	r0, #0
 800168a:	f040 80cc 	bne.w	8001826 <HAL_SPI_TransmitReceive+0x1d8>
 800168e:	2b04      	cmp	r3, #4
 8001690:	f040 80c9 	bne.w	8001826 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001694:	2d00      	cmp	r5, #0
 8001696:	f000 80c4 	beq.w	8001822 <HAL_SPI_TransmitReceive+0x1d4>
 800169a:	f1b9 0f00 	cmp.w	r9, #0
 800169e:	f000 80c0 	beq.w	8001822 <HAL_SPI_TransmitReceive+0x1d4>
 80016a2:	2e00      	cmp	r6, #0
 80016a4:	f000 80bd 	beq.w	8001822 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80016a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80016ac:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80016b0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80016b2:	bf1c      	itt	ne
 80016b4:	2305      	movne	r3, #5
 80016b6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80016be:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80016c0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016c2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80016c4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80016c6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016c8:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80016ca:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016cc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80016ce:	bf58      	it	pl
 80016d0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80016d2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80016d4:	bf58      	it	pl
 80016d6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80016da:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80016dc:	bf58      	it	pl
 80016de:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016e0:	68e2      	ldr	r2, [r4, #12]
 80016e2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80016e6:	d158      	bne.n	800179a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016e8:	b109      	cbz	r1, 80016ee <HAL_SPI_TransmitReceive+0xa0>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d107      	bne.n	80016fe <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016ee:	f835 2b02 	ldrh.w	r2, [r5], #2
 80016f2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80016f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016f6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80016fe:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001702:	b29b      	uxth	r3, r3
 8001704:	b9ab      	cbnz	r3, 8001732 <HAL_SPI_TransmitReceive+0xe4>
 8001706:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001708:	b29b      	uxth	r3, r3
 800170a:	b993      	cbnz	r3, 8001732 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800170c:	4642      	mov	r2, r8
 800170e:	4639      	mov	r1, r7
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fe89 	bl	8001428 <SPI_EndRxTxTransaction>
 8001716:	2800      	cmp	r0, #0
 8001718:	f040 8081 	bne.w	800181e <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d132      	bne.n	8001788 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	9001      	str	r0, [sp, #4]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	9201      	str	r2, [sp, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]
 8001730:	e02a      	b.n	8001788 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	6893      	ldr	r3, [r2, #8]
 8001736:	0799      	lsls	r1, r3, #30
 8001738:	d50d      	bpl.n	8001756 <HAL_SPI_TransmitReceive+0x108>
 800173a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800173c:	b29b      	uxth	r3, r3
 800173e:	b153      	cbz	r3, 8001756 <HAL_SPI_TransmitReceive+0x108>
 8001740:	b14d      	cbz	r5, 8001756 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001744:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001748:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800174a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800174c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800174e:	3b01      	subs	r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001754:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001756:	6893      	ldr	r3, [r2, #8]
 8001758:	07db      	lsls	r3, r3, #31
 800175a:	d50c      	bpl.n	8001776 <HAL_SPI_TransmitReceive+0x128>
 800175c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800175e:	b29b      	uxth	r3, r3
 8001760:	b14b      	cbz	r3, 8001776 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001764:	68d2      	ldr	r2, [r2, #12]
 8001766:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800176a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800176c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800176e:	3b01      	subs	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001774:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001776:	f7fe fef9 	bl	800056c <HAL_GetTick>
 800177a:	eba0 0008 	sub.w	r0, r0, r8
 800177e:	4287      	cmp	r7, r0
 8001780:	d8be      	bhi.n	8001700 <HAL_SPI_TransmitReceive+0xb2>
 8001782:	1c7e      	adds	r6, r7, #1
 8001784:	d0bc      	beq.n	8001700 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001788:	2301      	movs	r3, #1
 800178a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800178e:	2300      	movs	r3, #0
 8001790:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001794:	b003      	add	sp, #12
 8001796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800179a:	b109      	cbz	r1, 80017a0 <HAL_SPI_TransmitReceive+0x152>
 800179c:	2e01      	cmp	r6, #1
 800179e:	d108      	bne.n	80017b2 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017a0:	782a      	ldrb	r2, [r5, #0]
 80017a2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017a6:	3301      	adds	r3, #1
 80017a8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80017aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80017b2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b91b      	cbnz	r3, 80017c2 <HAL_SPI_TransmitReceive+0x174>
 80017ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0a4      	beq.n	800170c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	0798      	lsls	r0, r3, #30
 80017c8:	d50e      	bpl.n	80017e8 <HAL_SPI_TransmitReceive+0x19a>
 80017ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b15b      	cbz	r3, 80017e8 <HAL_SPI_TransmitReceive+0x19a>
 80017d0:	b155      	cbz	r5, 80017e8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80017d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017da:	3301      	adds	r3, #1
 80017dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80017de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80017e6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	6893      	ldr	r3, [r2, #8]
 80017ec:	07d9      	lsls	r1, r3, #31
 80017ee:	d50d      	bpl.n	800180c <HAL_SPI_TransmitReceive+0x1be>
 80017f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b153      	cbz	r3, 800180c <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80017f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017f8:	68d2      	ldr	r2, [r2, #12]
 80017fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80017fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017fe:	3301      	adds	r3, #1
 8001800:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001802:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001804:	3b01      	subs	r3, #1
 8001806:	b29b      	uxth	r3, r3
 8001808:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800180a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800180c:	f7fe feae 	bl	800056c <HAL_GetTick>
 8001810:	eba0 0008 	sub.w	r0, r0, r8
 8001814:	4287      	cmp	r7, r0
 8001816:	d8cd      	bhi.n	80017b4 <HAL_SPI_TransmitReceive+0x166>
 8001818:	1c7b      	adds	r3, r7, #1
 800181a:	d0cb      	beq.n	80017b4 <HAL_SPI_TransmitReceive+0x166>
 800181c:	e7b3      	b.n	8001786 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800181e:	2320      	movs	r3, #32
 8001820:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001822:	2001      	movs	r0, #1
 8001824:	e7b0      	b.n	8001788 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001826:	2002      	movs	r0, #2
 8001828:	e7ae      	b.n	8001788 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800182a:	2002      	movs	r0, #2
 800182c:	e7b2      	b.n	8001794 <HAL_SPI_TransmitReceive+0x146>

0800182e <HAL_SPI_Receive>:
{
 800182e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001832:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001834:	6843      	ldr	r3, [r0, #4]
 8001836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800183a:	4604      	mov	r4, r0
 800183c:	4688      	mov	r8, r1
 800183e:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001840:	d10c      	bne.n	800185c <HAL_SPI_Receive+0x2e>
 8001842:	6883      	ldr	r3, [r0, #8]
 8001844:	b953      	cbnz	r3, 800185c <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001846:	2304      	movs	r3, #4
 8001848:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800184c:	4613      	mov	r3, r2
 800184e:	9500      	str	r5, [sp, #0]
 8001850:	460a      	mov	r2, r1
 8001852:	f7ff fefc 	bl	800164e <HAL_SPI_TransmitReceive>
}
 8001856:	b002      	add	sp, #8
 8001858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800185c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001860:	2b01      	cmp	r3, #1
 8001862:	d079      	beq.n	8001958 <HAL_SPI_Receive+0x12a>
 8001864:	2301      	movs	r3, #1
 8001866:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800186a:	f7fe fe7f 	bl	800056c <HAL_GetTick>
 800186e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001870:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001874:	b2c0      	uxtb	r0, r0
 8001876:	2801      	cmp	r0, #1
 8001878:	d16c      	bne.n	8001954 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800187a:	f1b8 0f00 	cmp.w	r8, #0
 800187e:	d057      	beq.n	8001930 <HAL_SPI_Receive+0x102>
 8001880:	2f00      	cmp	r7, #0
 8001882:	d055      	beq.n	8001930 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001884:	2304      	movs	r3, #4
 8001886:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800188e:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001890:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001892:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001894:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001896:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001898:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189a:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 800189c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a2:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80018a4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 80018a8:	bf02      	ittt	eq
 80018aa:	681a      	ldreq	r2, [r3, #0]
 80018ac:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80018b0:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80018b6:	bf5e      	ittt	pl
 80018b8:	681a      	ldrpl	r2, [r3, #0]
 80018ba:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80018be:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80018c0:	68e3      	ldr	r3, [r4, #12]
 80018c2:	b1f3      	cbz	r3, 8001902 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 80018c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b1fb      	cbz	r3, 800190a <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	07d2      	lsls	r2, r2, #31
 80018d0:	d535      	bpl.n	800193e <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018d6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018da:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80018dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80018e4:	e7ee      	b.n	80018c4 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	07d0      	lsls	r0, r2, #31
 80018ec:	d518      	bpl.n	8001920 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80018ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
 80018f2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80018f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f6:	3301      	adds	r3, #1
 80018f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80018fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001902:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ed      	bne.n	80018e6 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800190a:	4632      	mov	r2, r6
 800190c:	4629      	mov	r1, r5
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff fd5f 	bl	80013d2 <SPI_EndRxTransaction>
 8001914:	b9d8      	cbnz	r0, 800194e <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001916:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001918:	3000      	adds	r0, #0
 800191a:	bf18      	it	ne
 800191c:	2001      	movne	r0, #1
 800191e:	e007      	b.n	8001930 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001920:	f7fe fe24 	bl	800056c <HAL_GetTick>
 8001924:	1b80      	subs	r0, r0, r6
 8001926:	4285      	cmp	r5, r0
 8001928:	d8eb      	bhi.n	8001902 <HAL_SPI_Receive+0xd4>
 800192a:	1c69      	adds	r1, r5, #1
 800192c:	d0e9      	beq.n	8001902 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 800192e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001930:	2301      	movs	r3, #1
 8001932:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001936:	2300      	movs	r3, #0
 8001938:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 800193c:	e78b      	b.n	8001856 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800193e:	f7fe fe15 	bl	800056c <HAL_GetTick>
 8001942:	1b80      	subs	r0, r0, r6
 8001944:	4285      	cmp	r5, r0
 8001946:	d8bd      	bhi.n	80018c4 <HAL_SPI_Receive+0x96>
 8001948:	1c6b      	adds	r3, r5, #1
 800194a:	d0bb      	beq.n	80018c4 <HAL_SPI_Receive+0x96>
 800194c:	e7ef      	b.n	800192e <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800194e:	2320      	movs	r3, #32
 8001950:	6563      	str	r3, [r4, #84]	; 0x54
 8001952:	e7e0      	b.n	8001916 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8001954:	2002      	movs	r0, #2
 8001956:	e7eb      	b.n	8001930 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8001958:	2002      	movs	r0, #2
 800195a:	e77c      	b.n	8001856 <HAL_SPI_Receive+0x28>

0800195c <HAL_SPI_ErrorCallback>:
 800195c:	4770      	bx	lr
	...

08001960 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001960:	6803      	ldr	r3, [r0, #0]
{
 8001962:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001964:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001966:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001968:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800196c:	2d01      	cmp	r5, #1
{
 800196e:	b085      	sub	sp, #20
 8001970:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001972:	d105      	bne.n	8001980 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001974:	064d      	lsls	r5, r1, #25
 8001976:	d503      	bpl.n	8001980 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8001978:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800197a:	4798      	blx	r3
}
 800197c:	b005      	add	sp, #20
 800197e:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001980:	0795      	lsls	r5, r2, #30
 8001982:	d504      	bpl.n	800198e <HAL_SPI_IRQHandler+0x2e>
 8001984:	0608      	lsls	r0, r1, #24
 8001986:	d502      	bpl.n	800198e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800198a:	4620      	mov	r0, r4
 800198c:	e7f5      	b.n	800197a <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800198e:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001992:	d0f3      	beq.n	800197c <HAL_SPI_IRQHandler+0x1c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001994:	068d      	lsls	r5, r1, #26
 8001996:	d5f1      	bpl.n	800197c <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001998:	0650      	lsls	r0, r2, #25
 800199a:	d50f      	bpl.n	80019bc <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800199c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80019a0:	2803      	cmp	r0, #3
 80019a2:	f04f 0500 	mov.w	r5, #0
 80019a6:	d04c      	beq.n	8001a42 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019aa:	f040 0004 	orr.w	r0, r0, #4
 80019ae:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019b0:	9500      	str	r5, [sp, #0]
 80019b2:	68d8      	ldr	r0, [r3, #12]
 80019b4:	9000      	str	r0, [sp, #0]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	9000      	str	r0, [sp, #0]
 80019ba:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019bc:	0695      	lsls	r5, r2, #26
 80019be:	d50c      	bpl.n	80019da <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80019c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c2:	f040 0001 	orr.w	r0, r0, #1
 80019c6:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80019c8:	2000      	movs	r0, #0
 80019ca:	9002      	str	r0, [sp, #8]
 80019cc:	6898      	ldr	r0, [r3, #8]
 80019ce:	9002      	str	r0, [sp, #8]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80019d6:	6018      	str	r0, [r3, #0]
 80019d8:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80019da:	05d0      	lsls	r0, r2, #23
 80019dc:	d508      	bpl.n	80019f0 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80019de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019e0:	f042 0208 	orr.w	r2, r2, #8
 80019e4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80019e6:	2200      	movs	r2, #0
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	9203      	str	r2, [sp, #12]
 80019ee:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d0c2      	beq.n	800197c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80019fc:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80019fe:	2201      	movs	r2, #1
 8001a00:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a04:	078a      	lsls	r2, r1, #30
 8001a06:	d023      	beq.n	8001a50 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a08:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001a0a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a0c:	f022 0203 	bic.w	r2, r2, #3
 8001a10:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001a12:	b140      	cbz	r0, 8001a26 <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_SPI_IRQHandler+0xf8>)
 8001a16:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001a18:	f7fe fe2c 	bl	8000674 <HAL_DMA_Abort_IT>
 8001a1c:	b118      	cbz	r0, 8001a26 <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a24:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001a26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d0a7      	beq.n	800197c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_SPI_IRQHandler+0xf8>)
 8001a2e:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001a30:	f7fe fe20 	bl	8000674 <HAL_DMA_Abort_IT>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d0a1      	beq.n	800197c <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3e:	6563      	str	r3, [r4, #84]	; 0x54
 8001a40:	e79c      	b.n	800197c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	9b01      	ldr	r3, [sp, #4]
        return;
 8001a4e:	e795      	b.n	800197c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff ff83 	bl	800195c <HAL_SPI_ErrorCallback>
 8001a56:	e791      	b.n	800197c <HAL_SPI_IRQHandler+0x1c>
 8001a58:	08001a5d 	.word	0x08001a5d

08001a5c <SPI_DMAAbortOnError>:
{
 8001a5c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a64:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8001a66:	f7ff ff79 	bl	800195c <HAL_SPI_ErrorCallback>
 8001a6a:	bd08      	pop	{r3, pc}

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	2230      	movs	r2, #48	; 0x30
{
 8001a70:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	eb0d 0002 	add.w	r0, sp, r2
 8001a76:	2100      	movs	r1, #0
 8001a78:	f000 fae6 	bl	8002048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	2214      	movs	r2, #20
 8001a7e:	2100      	movs	r1, #0
 8001a80:	a807      	add	r0, sp, #28
 8001a82:	f000 fae1 	bl	8002048 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a86:	2100      	movs	r1, #0
 8001a88:	2210      	movs	r2, #16
 8001a8a:	a803      	add	r0, sp, #12
 8001a8c:	f000 fadc 	bl	8002048 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	2500      	movs	r5, #0
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <SystemClock_Config+0xac>)
 8001a94:	9501      	str	r5, [sp, #4]
 8001a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <SystemClock_Config+0xb0>)
 8001aaa:	9502      	str	r5, [sp, #8]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ac8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aca:	2308      	movs	r3, #8
 8001acc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad4:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ad6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ada:	2307      	movs	r3, #7
 8001adc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ade:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae2:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae4:	f7ff f904 	bl	8000cf0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001af0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af8:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001afa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afc:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b00:	f7ff faca 	bl	8001098 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b08:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b0a:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b0c:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0e:	f7ff fb5f 	bl	80011d0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001b12:	b018      	add	sp, #96	; 0x60
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <main>:
{
 8001b20:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001b24:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001b26:	f7fe fcfb 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001b2a:	f7ff ff9f 	bl	8001a6c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	2214      	movs	r2, #20
 8001b30:	2100      	movs	r1, #0
 8001b32:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b34:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f000 fa87 	bl	8002048 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3a:	4ba2      	ldr	r3, [pc, #648]	; (8001dc4 <main+0x2a4>)
 8001b3c:	9401      	str	r4, [sp, #4]
 8001b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001b40:	48a1      	ldr	r0, [pc, #644]	; (8001dc8 <main+0x2a8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b42:	f042 0210 	orr.w	r2, r2, #16
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
 8001b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4a:	f002 0210 	and.w	r2, r2, #16
 8001b4e:	9201      	str	r2, [sp, #4]
 8001b50:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	9402      	str	r4, [sp, #8]
 8001b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b56:	f042 0204 	orr.w	r2, r2, #4
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	f002 0204 	and.w	r2, r2, #4
 8001b62:	9202      	str	r2, [sp, #8]
 8001b64:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	9403      	str	r4, [sp, #12]
 8001b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b72:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001b76:	9203      	str	r2, [sp, #12]
 8001b78:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	9404      	str	r4, [sp, #16]
 8001b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b86:	f002 0201 	and.w	r2, r2, #1
 8001b8a:	9204      	str	r2, [sp, #16]
 8001b8c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	9405      	str	r4, [sp, #20]
 8001b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b92:	f042 0202 	orr.w	r2, r2, #2
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9a:	f002 0202 	and.w	r2, r2, #2
 8001b9e:	9205      	str	r2, [sp, #20]
 8001ba0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	9406      	str	r4, [sp, #24]
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001bba:	f7fe fe4d 	bl	8000858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4882      	ldr	r0, [pc, #520]	; (8001dcc <main+0x2ac>)
 8001bc4:	f7fe fe48 	bl	8000858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001bc8:	4622      	mov	r2, r4
 8001bca:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001bce:	4880      	ldr	r0, [pc, #512]	; (8001dd0 <main+0x2b0>)
 8001bd0:	f7fe fe42 	bl	8000858 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001bd6:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bda:	a907      	add	r1, sp, #28
 8001bdc:	487a      	ldr	r0, [pc, #488]	; (8001dc8 <main+0x2a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001be2:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f7fe fd56 	bl	8000698 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bec:	a907      	add	r1, sp, #28
 8001bee:	4877      	ldr	r0, [pc, #476]	; (8001dcc <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf6:	2705      	movs	r7, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bfa:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f7fe fd4b 	bl	8000698 <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c02:	a907      	add	r1, sp, #28
 8001c04:	4871      	ldr	r0, [pc, #452]	; (8001dcc <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c08:	2504      	movs	r5, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c0c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c0e:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f7fe fd3f 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	a907      	add	r1, sp, #28
 8001c1c:	486d      	ldr	r0, [pc, #436]	; (8001dd4 <main+0x2b4>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c1e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f7fe fd38 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	a907      	add	r1, sp, #28
 8001c2e:	4869      	ldr	r0, [pc, #420]	; (8001dd4 <main+0x2b4>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c36:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f7fe fd2c 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001c40:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c44:	a907      	add	r1, sp, #28
 8001c46:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <main+0x2b0>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001c48:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c4a:	f44f 7700 	mov.w	r7, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f7fe fd20 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c58:	a907      	add	r1, sp, #28
 8001c5a:	485f      	ldr	r0, [pc, #380]	; (8001dd8 <main+0x2b8>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c5c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c62:	f04f 0b0a 	mov.w	fp, #10
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f7fe fd17 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	a907      	add	r1, sp, #28
 8001c70:	4859      	ldr	r0, [pc, #356]	; (8001dd8 <main+0x2b8>)
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c72:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c74:	f04f 0a20 	mov.w	sl, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c80:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f7fe fd08 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c88:	a907      	add	r1, sp, #28
 8001c8a:	4851      	ldr	r0, [pc, #324]	; (8001dd0 <main+0x2b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c90:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f7fe fd00 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca0:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	484c      	ldr	r0, [pc, #304]	; (8001dd4 <main+0x2b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ca8:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f7fe fcf4 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <main+0x2bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb2:	4845      	ldr	r0, [pc, #276]	; (8001dc8 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cba:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbc:	f7fe fcec 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cc0:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	4841      	ldr	r0, [pc, #260]	; (8001dc8 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cc4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001cca:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f7fe fce3 	bl	8000698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	2006      	movs	r0, #6
 8001cd8:	f7fe fc74 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cdc:	2006      	movs	r0, #6
 8001cde:	f7fe fca5 	bl	800062c <HAL_NVIC_EnableIRQ>
  hi2s3.Instance = SPI3;
 8001ce2:	4840      	ldr	r0, [pc, #256]	; (8001de4 <main+0x2c4>)
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <main+0x2c8>)
  hspi1.Instance = SPI1;
 8001ce6:	4d41      	ldr	r5, [pc, #260]	; (8001dec <main+0x2cc>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ce8:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cea:	e880 0088 	stmia.w	r0, {r3, r7}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <main+0x2d0>)
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cf0:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001cf2:	6107      	str	r7, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cf4:	6143      	str	r3, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001cf6:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cf8:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cfa:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cfc:	f7fe fdbe 	bl	800087c <HAL_I2S_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <main+0x2d4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	60ac      	str	r4, [r5, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d04:	f44f 7382 	mov.w	r3, #260	; 0x104
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d08:	4628      	mov	r0, r5
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0a:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d0e:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d10:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d12:	616c      	str	r4, [r5, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d14:	61af      	str	r7, [r5, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d16:	622c      	str	r4, [r5, #32]
  SPI_Tx_Buffer [0] = 0x20;
 8001d18:	4f37      	ldr	r7, [pc, #220]	; (8001df8 <main+0x2d8>)
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1c:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d1e:	f8c5 a01c 	str.w	sl, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001d22:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d26:	f7ff fbad 	bl	8001484 <HAL_SPI_Init>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <main+0x2a8>)
 8001d30:	f7fe fd92 	bl	8000858 <HAL_GPIO_WritePin>
  SPI_Tx_Buffer [1] = 0x11;
 8001d34:	2311      	movs	r3, #17
 8001d36:	707b      	strb	r3, [r7, #1]
  HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,2,50);
 8001d38:	464a      	mov	r2, r9
 8001d3a:	2332      	movs	r3, #50	; 0x32
 8001d3c:	4639      	mov	r1, r7
 8001d3e:	4628      	mov	r0, r5
  SPI_Tx_Buffer [0] = 0x20;
 8001d40:	f887 a000 	strb.w	sl, [r7]
  HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,2,50);
 8001d44:	f7ff fbdb 	bl	80014fe <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8001d48:	4632      	mov	r2, r6
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <main+0x2a8>)
 8001d4e:	f7fe fd83 	bl	8000858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8001d52:	4622      	mov	r2, r4
 8001d54:	4641      	mov	r1, r8
 8001d56:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <main+0x2a8>)
 8001d58:	f7fe fd7e 	bl	8000858 <HAL_GPIO_WritePin>
   SPI_Tx_Buffer[0] = 0x20 | 0x80;
 8001d5c:	23a0      	movs	r3, #160	; 0xa0
 8001d5e:	703b      	strb	r3, [r7, #0]
   HAL_SPI_Transmit(&hspi1,SPI_Tx_Buffer,1,50);
 8001d60:	4632      	mov	r2, r6
 8001d62:	2332      	movs	r3, #50	; 0x32
 8001d64:	4639      	mov	r1, r7
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fbc9 	bl	80014fe <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi1, SPI_Rx_Buffer,1,50);
 8001d6c:	2332      	movs	r3, #50	; 0x32
 8001d6e:	4632      	mov	r2, r6
 8001d70:	4922      	ldr	r1, [pc, #136]	; (8001dfc <main+0x2dc>)
 8001d72:	4628      	mov	r0, r5
 8001d74:	f7ff fd5b 	bl	800182e <HAL_SPI_Receive>
   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8001d78:	4632      	mov	r2, r6
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <main+0x2a8>)
 8001d7e:	f7fe fd6b 	bl	8000858 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_RESET);
 8001d82:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001d86:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2108      	movs	r1, #8
 8001d90:	f7fe fd62 	bl	8000858 <HAL_GPIO_WritePin>
	   SPI_Tx_Buffer [0] = 0x0F | 0x80;
 8001d94:	238f      	movs	r3, #143	; 0x8f
 8001d96:	703b      	strb	r3, [r7, #0]
	   HAL_SPI_Transmit(&hspi1, SPI_Tx_Buffer,1,50);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2332      	movs	r3, #50	; 0x32
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <main+0x2d8>)
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7ff fbad 	bl	80014fe <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, SPI_Rx_Buffer,1,50);
 8001da4:	2332      	movs	r3, #50	; 0x32
 8001da6:	2201      	movs	r2, #1
 8001da8:	4914      	ldr	r1, [pc, #80]	; (8001dfc <main+0x2dc>)
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff fd3f 	bl	800182e <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port,CS_I2C_SPI_Pin,GPIO_PIN_SET);
 8001db0:	4620      	mov	r0, r4
 8001db2:	2201      	movs	r2, #1
 8001db4:	2108      	movs	r1, #8
 8001db6:	f7fe fd4f 	bl	8000858 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001dba:	2064      	movs	r0, #100	; 0x64
 8001dbc:	f7fe fbdc 	bl	8000578 <HAL_Delay>
 8001dc0:	e7e3      	b.n	8001d8a <main+0x26a>
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	10110000 	.word	0x10110000
 8001de0:	10120000 	.word	0x10120000
 8001de4:	20000090 	.word	0x20000090
 8001de8:	40003c00 	.word	0x40003c00
 8001dec:	20000034 	.word	0x20000034
 8001df0:	00017700 	.word	0x00017700
 8001df4:	40013000 	.word	0x40013000
 8001df8:	2000002d 	.word	0x2000002d
 8001dfc:	2000002f 	.word	0x2000002f

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_MspInit+0x3c>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	9100      	str	r1, [sp, #0]
 8001e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e16:	9200      	str	r2, [sp, #0]
 8001e18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	9101      	str	r1, [sp, #4]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e30:	f7fe fbb6 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e34:	b003      	add	sp, #12
 8001e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	4604      	mov	r4, r0
 8001e44:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	2214      	movs	r2, #20
 8001e48:	2100      	movs	r1, #0
 8001e4a:	a803      	add	r0, sp, #12
 8001e4c:	f000 f8fc 	bl	8002048 <memset>
  if(hi2s->Instance==SPI3)
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_I2S_MspInit+0x98>)
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d13d      	bne.n	8001ed4 <HAL_I2S_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e58:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	9400      	str	r4, [sp, #0]
 8001e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e62:	481e      	ldr	r0, [pc, #120]	; (8001edc <HAL_I2S_MspInit+0x9c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	9401      	str	r4, [sp, #4]
 8001e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e80:	f002 0201 	and.w	r2, r2, #1
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e88:	9402      	str	r4, [sp, #8]
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	f042 0204 	orr.w	r2, r2, #4
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e9e:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ea0:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ea4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ea8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f7fe fbf5 	bl	8000698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001eae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb2:	a903      	add	r1, sp, #12
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <HAL_I2S_MspInit+0xa0>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001eb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ebe:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f7fe fbea 	bl	8000698 <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001ec4:	2033      	movs	r0, #51	; 0x33
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	4621      	mov	r1, r4
 8001eca:	f7fe fb7b 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ece:	2033      	movs	r0, #51	; 0x33
 8001ed0:	f7fe fbac 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ed4:	b008      	add	sp, #32
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	40003c00 	.word	0x40003c00
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020800 	.word	0x40020800

08001ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eea:	2214      	movs	r2, #20
 8001eec:	2100      	movs	r1, #0
 8001eee:	a803      	add	r0, sp, #12
 8001ef0:	f000 f8aa 	bl	8002048 <memset>
  if(hspi->Instance==SPI1)
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_SPI_MspInit+0x70>)
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d128      	bne.n	8001f4e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001f00:	2400      	movs	r4, #0
 8001f02:	9401      	str	r4, [sp, #4]
 8001f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	4814      	ldr	r0, [pc, #80]	; (8001f58 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f14:	9201      	str	r2, [sp, #4]
 8001f16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	9402      	str	r4, [sp, #8]
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f2c:	23e0      	movs	r3, #224	; 0xe0
 8001f2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f36:	2305      	movs	r3, #5
 8001f38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f7fe fbad 	bl	8000698 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f3e:	2023      	movs	r0, #35	; 0x23
 8001f40:	4622      	mov	r2, r4
 8001f42:	4621      	mov	r1, r4
 8001f44:	f7fe fb3e 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f48:	2023      	movs	r0, #35	; 0x23
 8001f4a:	f7fe fb6f 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f4e:	b008      	add	sp, #32
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	bf00      	nop
 8001f54:	40013000 	.word	0x40013000
 8001f58:	40020000 	.word	0x40020000

08001f5c <NMI_Handler>:
 8001f5c:	4770      	bx	lr

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler>

08001f66 <SVC_Handler>:
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f7fe baf2 	b.w	8000554 <HAL_IncTick>

08001f70 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7fe bc77 	b.w	8000864 <HAL_GPIO_EXTI_IRQHandler>
	...

08001f78 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <SPI1_IRQHandler+0x8>)
 8001f7a:	f7ff bcf1 	b.w	8001960 <HAL_SPI_IRQHandler>
 8001f7e:	bf00      	nop
 8001f80:	20000034 	.word	0x20000034

08001f84 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001f84:	4801      	ldr	r0, [pc, #4]	; (8001f8c <SPI3_IRQHandler+0x8>)
 8001f86:	f7fe bd11 	b.w	80009ac <HAL_I2S_IRQHandler>
 8001f8a:	bf00      	nop
 8001f8c:	20000090 	.word	0x20000090

08001f90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SystemInit+0x18>)
 8001f92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f96:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fb2:	e003      	b.n	8001fbc <LoopCopyDataInit>

08001fb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fba:	3104      	adds	r1, #4

08001fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fc4:	d3f6      	bcc.n	8001fb4 <CopyDataInit>
  ldr  r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fc8:	e002      	b.n	8001fd0 <LoopFillZerobss>

08001fca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fcc:	f842 3b04 	str.w	r3, [r2], #4

08001fd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fd4:	d3f9      	bcc.n	8001fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fd6:	f7ff ffdb 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f000 f811 	bl	8002000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7ff fd9f 	bl	8001b20 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fe8:	08002090 	.word	0x08002090
  ldr  r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ff0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ff4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ff8:	200000d8 	.word	0x200000d8

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <__libc_init_array>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	4e0d      	ldr	r6, [pc, #52]	; (8002038 <__libc_init_array+0x38>)
 8002004:	4c0d      	ldr	r4, [pc, #52]	; (800203c <__libc_init_array+0x3c>)
 8002006:	1ba4      	subs	r4, r4, r6
 8002008:	10a4      	asrs	r4, r4, #2
 800200a:	2500      	movs	r5, #0
 800200c:	42a5      	cmp	r5, r4
 800200e:	d109      	bne.n	8002024 <__libc_init_array+0x24>
 8002010:	4e0b      	ldr	r6, [pc, #44]	; (8002040 <__libc_init_array+0x40>)
 8002012:	4c0c      	ldr	r4, [pc, #48]	; (8002044 <__libc_init_array+0x44>)
 8002014:	f000 f820 	bl	8002058 <_init>
 8002018:	1ba4      	subs	r4, r4, r6
 800201a:	10a4      	asrs	r4, r4, #2
 800201c:	2500      	movs	r5, #0
 800201e:	42a5      	cmp	r5, r4
 8002020:	d105      	bne.n	800202e <__libc_init_array+0x2e>
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002028:	4798      	blx	r3
 800202a:	3501      	adds	r5, #1
 800202c:	e7ee      	b.n	800200c <__libc_init_array+0xc>
 800202e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002032:	4798      	blx	r3
 8002034:	3501      	adds	r5, #1
 8002036:	e7f2      	b.n	800201e <__libc_init_array+0x1e>
 8002038:	08002088 	.word	0x08002088
 800203c:	08002088 	.word	0x08002088
 8002040:	08002088 	.word	0x08002088
 8002044:	0800208c 	.word	0x0800208c

08002048 <memset>:
 8002048:	4402      	add	r2, r0
 800204a:	4603      	mov	r3, r0
 800204c:	4293      	cmp	r3, r2
 800204e:	d100      	bne.n	8002052 <memset+0xa>
 8002050:	4770      	bx	lr
 8002052:	f803 1b01 	strb.w	r1, [r3], #1
 8002056:	e7f9      	b.n	800204c <memset+0x4>

08002058 <_init>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr

08002064 <_fini>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr
